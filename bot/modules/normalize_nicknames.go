package modules

import (
	"strings"

	"github.com/diamondburned/arikawa/v3/api"
	"github.com/diamondburned/arikawa/v3/discord"
	"github.com/diamondburned/arikawa/v3/gateway"
	"github.com/diamondburned/arikawa/v3/utils/json/option"
)

func init() {
	modules = append(modules, initNormalizeNicknames)
}

func initNormalizeNicknames() {
	if !config.NormalizeNicknames {
		return
	}

	s.AddHandler(func(e *gateway.GuildMemberUpdateEvent) {
		NormalizeNickname(e.GuildID, e.User.ID, NickOrUsername(e.Nick, e.User.Username))
	})
	s.AddHandler(func(e *gateway.GuildMemberAddEvent) {
		NormalizeNickname(e.GuildID, e.User.ID, NickOrUsername(e.Nick, e.User.Username))
	})
}

type Replacement struct {
	normal  string
	special []string
}

func makeReplacement(normal, special string) Replacement {
	return Replacement{normal: normal, special: strings.Split(special, "")}
}

var (
	// Found in https://onlineunicodetools.com/js/libs/normalize-unicode.js?v=b5499e
	replacements = []Replacement{
		makeReplacement("A", "Ⓐ🅐Ａ𝐀𝕬𝑨𝓐𝔸𝙰𝖠𝗔𝘼𝘈🄰🅰🇦𝔄ᴬ∀ÃÅĀĂĄǍǞǠǺȀȂȦȺΆΑАӐӒᗅᗩᴀḀẠẢẤẦẨẪẬẮẰẲẴẶἈἉἊἋἌἍἎἏᾈᾉᾊᾋᾌᾍᾎᾏᾸᾹᾺΆᾼ₳Åꓮ𐊠𐋎𐌀𝚨𝛢𝜜𝝖𝞐🄐ᗄⱯꓯᎪᎯᏌᗆᗇᗈᗉᗊᗋᗌ"),
		makeReplacement("a", "ⓐａ𝐚𝖆𝒂𝓪𝕒𝚊𝖺𝗮𝙖𝘢𝔞ₐᵃ⒜ɐɒልﾑãåāăąǎǟǡǻȁȃȧɑάαаӑӓᵅᶏḁẚạảấầẩẫậắằẳẵặἀἁἂἃἄἅἆἇὰάᾀᾁᾂᾃᾄᾅᾆᾇᾰᾱᾲᾳᾴᾶᾷⱥⲀⲁ𝛂𝛼𝜶𝝰ᵄᶛ𐐟⍺ª­"),
		makeReplacement("B", "Ⓑ🅑Ｂ𝐁𝕭𝑩𝓑𝔹𝙱𝖡𝗕𝘽𝘉🄱🅱🇧𝔅ᴮ𐐒ßƁɃɮʙΒβϐВвᗷᗸᗹᗾᗿᙖᙗᙘᙝᙞᙟᛒᛔᴃᴯᵝᵦḂḄḆẞ₿ℬⲂⲃꓐꞖꞴꞵ𐊂𐊡𐌁𐌱𐑂𐐚𝚩𝛣𝜝𝝗𝞑🄑𝛃𝛽𝜷𝝱ᗺᘀᙠᙙꓭꞚꞛ𐐺฿ᏰᏴᏸᏼꞜꞝ"),
		makeReplacement("b", "ⓑｂ𝐛𝖇𝒃𝓫𝕓𝚋𝖻𝗯𝙗𝘣𝔟ᵇ⒝ጌ乃þƀƄƅЬьᵬᶀḃḅḇꝧ𐌜ႦႪᏏᑲᑳᑾᑿᒀᒁᒂᒃᒈ␢ꞗ"),
		makeReplacement("C", "Ⓒ🅒Ｃ𝐂𝕮𝑪𝓒ℂ𝙲𝖢𝗖𝘾𝘊🄲🅲🇨ℭᑦƆÇĆĈĊČƇȻʗϚϹϾСҀҪḈ₵℃∁Ⲥⵎꓚ🄫𐊢𐌂𐐕𐐽𐒨©𑀝🄒ϽϿꓛꜾ𐐣𐒧ჂᏟᏣᑐᑑᑒᑓᑔᑕᑖᑝᑞᑟᑠᑡᑢᑣᑤᑥᑦᑩᑪᒼↃↅꞒ"),
		makeReplacement("c", "ⓒｃ𝐜𝖈𝒄𝓬𝕔𝚌𝖼𝗰𝙘𝘤𝔠꜀ᶜ⒞ɔርçćĉċčƈȼɕͼςϛϲсҁҫᴄḉⲥꞔ𝛓𝜍𝝇𝞁ͻͽᴐᵓꜿ𐑋𐑮င၁ꞓↄ"),
		makeReplacement("D", "Ⓓ🅓Ｄ𝐃𝕯𝑫𝓓𝔻𝙳𝖣𝗗𝘿𝘋🄳🅳🇩𝔇ᴰᗡႧÐĎĐƉƊᗟᗠᗤᗥᗦᗪᗫᗬᴅᴆḎḌḊḐḒⅅꓓ𐌃𐓈𐓉𐓰𑀥𝚫𝛥𝜟𝝙𝞓🄓ᗭꓷႧᎠ"),
		makeReplacement("d", "ⓓｄ𝐝𝖉𝒅𝓭𝕕𝚍𝖽𝗱𝙙𝘥𝔡ᵈ⒟ዕďđȡɖɗԀԁᵭᶁḋḍḏḑḓⅆꝱᏧᑯᑰᑱᑺᑻᑼᑽᒄᒇ"),
		makeReplacement("E", "Ⓔ🅔Ｅ𝐄𝕰𝑬𝓔𝔼𝙴𝖤𝗘𝙀𝘌🄴🅴🇪𝔈ᴱƎËĒĔĖĘĚȄȆȨɆΈΕЀЁЕӖᴇḔḖḘḚḜẸẺẼẾỀỂỄỆἘἙἚἛἜἝῈΈℰⴹꓰ𐊆𐊤𐌄𑀚𝚬𝛦𝜠𝝚𝞔🄔ᴲ∃∄ⱻꓱཇཛᎬΣ"),
		makeReplacement("e", "ⓔｅ𝐞𝖊𝒆𝓮𝕖𝚎𝖾𝗲𝙚𝘦𝔢ₑᵉ⒠ǝɘቿ乇ëēĕėęěȅȇȩɇеѐёҼҾҽҿӗᶒᶱḕḗḙḛḝẹẻẽếềểễệ℮ℯⅇƏəӘәӚӛᵊₔ"),
		makeReplacement("F", "Ⓕ🅕Ｆ𝐅𝕱𝑭𝓕𝔽𝙵𝖥𝗙𝙁𝘍🄵🅵🇫𝔉⸁ℲꟻƑϜӺḞ₣℉ℱꓝꜰꞘ𐊇𐊥𐌅🄕ⅎꓞꝻ"),
		makeReplacement("f", "ⓕｆ𝐟𝖋𝒇𝓯𝕗𝚏𝖿𝗳𝙛𝘧𝔣ᶠ⒡ʇቻｷƒϝӻᵮᶂḟẝꞙᶡꝼ"),
		makeReplacement("G", "Ⓖ🅖Ｇ𝐆𝕲𝑮𝓖𝔾𝙶𝖦𝗚𝙂𝘎🄶🅶🇬𝔊ᴳ⅁ĜĞĠĢƓǤǦǴɢʛԌԍḠ₲ꓖꞠ𐌾🄖ꓨᎶᏀᏩᏵᏽᏳᏻႺ"),
		makeReplacement("g", "ⓖｇ𝐠𝖌𝒈𝓰𝕘𝚐𝗀𝗴𝙜𝘨𝔤₉ᵍ⒢ƃϱኗĝğġģǥǧǵɠɡցᶃᶢḡℊꝮꝯꞡꞬɓϬϭб𝛠𝜚𝝔𝞎"),
		makeReplacement("H", "Ⓗ🅗Ｈ𝐇𝕳𝑯𝓗ℍ𝙷𝖧𝗛𝙃𝘏🄷🅷🇭ℌᴴĤǶȞʜΉΗНнҢҤңҥӇӈӉӊԊԋԨԩᚺḢḤḦḨḪᵸἨἩἪἫἬἭἮἯᾘᾙᾚᾛᾜᾝᾞᾟῊΉῌ₶ℋⱧⲎꓧꜦꞪⲏ𐋏𐒎🄗𝚮𝛨𝜢𝝜𝞖Ꮋꟸ"),
		makeReplacement("h", "ⓗｈ𝐡𝖍𝒉𝓱𝕙𝚑𝗁𝗵𝙝𝘩𝔥ₕʰ⒣ɥዘんĥħȟɦɧђћհḣḥḧḩḫẖℎℏⱨꜧꞕ𐌷Կկᶣ୳ႯᏂᏥƕ"),
		makeReplacement("I", "Ⓘ🅘Ｉ𝐈𝕴𝑰𝓘𝕀𝙸𝖨𝗜𝙄𝘐🄸🅸🇮ℑᴵÏĨĪĬĮİƗǏȈȊɪΊΙΪІЇӏḬḮᶦỈỊἸἹἺἻἼἽἾἿῘῙῚΊℐ∣ⲒⵊⵏꓲꞁꞮꟾ𐊈𐊊𐊦𐌆𐌹𐒃𑀡𐌉𐊑𐌠𝚰𝛪𝜤𝝞𝞘🄘౹Ꮖ"),
		makeReplacement("i", "ⓘｉ𝐢𝖎𝒊𝓲𝕚𝚒𝗂𝗶𝙞𝘪𝔦ᵢⁱ⒤ᴉጎﾉïĩīĭįǐȉȋɨίϊіїᶖḭḯỉịὶίἰἱἲἳἴἵἶἷῐῑῒΐῖῗℹⅈⲓ𝛊𝜄𝜾𝝸𝚤ᵎᶥᎥ"),
		makeReplacement("J", "Ⓙ🅙Ｊ𝐉𝕵𝑱𝓙𝕁𝙹𝖩𝗝𝙅𝘑🄹🅹🇯𝔍ᴶſႱĴɈĵǰȷɟͿЈյᴊꓙ🄙ɾɿԴԸՂՆՐᘂᘃꓩꙆꙇ𐐓𐐢𐐻𐑊𐒗𑀧𑀨ႱᎫᏓᏝᒉᒊᒋᒌᒍᒎᒏᒐᒑᒒᒓᒔᒕᒖᒗᒘᒙᒚᒛᒜᒝᒞᒟᒠᒡᒢꞲ"),
		makeReplacement("j", "ⓙｊ𝐣𝖏𝒋𝓳𝕛𝚓𝗃𝗷𝙟𝘫𝔧ⱼʲ⒥ጋﾌɉʝϳјᶨⅉ𝚥"),
		makeReplacement("K", "Ⓚ🅚Ｋ𝐊𝕶𝑲𝓚𝕂𝙺𝖪𝗞𝙆𝘒🄺🅺🇰𝔎ᴷﻼĶƘǨΚϏЌКҚҜҞҠӃԞᛕᴋḰḲḴ₭KⱩⲔꓗꝀꞢ𐊋𐌊𐒼𐒽𐒾𝚱𝛫𝜥𝝟𝞙🄚ꓘꞰᏦꝂ"),
		makeReplacement("k", "ⓚｋ𝐤𝖐𝒌𝓴𝕜𝚔𝗄𝗸𝙠𝘬𝔨ₖᵏ⒦ʞጕズķĸƙǩκкќҡҟқҝӄԟᶄḱḳḵⱪⲕⳤꝁꞣ𐓤𐓥𐓦𝛋𝜅𝜿𝝹ꝃꝄꝅ"),
		makeReplacement("L", "Ⓛ🅛Ｌ𝐋𝕷𝑳𝓛𝕃𝙻𝖫𝗟𝙇𝘓🄻🅻🇱𝔏ᴸ⅂⅃ĹĻĽĿŁȽʟԼլւᴌḶḸḺḼᶫℒⳐⳑꓡ𐌋𐐛𐑃𑀉🄛˥ΓЃГгᴦꓶꞀ𐐹ᎱᏞᒣᒤᒥᒦᒧᒨᒩᒪᒫᒬᒭᒮᒯᒰᒱᒲᒳᒴᒵᒶᒷᒸᒹᒺᒻᒽꝈⅬꞭꝆ"),
		makeReplacement("l", "ⓛｌ𝐥𝖑𝒍𝓵𝕝𝚕𝗅𝗹𝙡𝘭𝔩ₗˡ⒧ረﾚĺļľłƖƚŀıɫɬɭιᶅᶩḷḹḻḽꝲⅼꝉꝇ"),
		makeReplacement("M", "Ⓜ🅜Ｍ𝐌𝕸𝑴𝓜𝕄𝙼𝖬𝗠𝙈𝘔🄼🅼🇲𝔐ᴹʍΜϺϻМмӍӎᗰᙏᛖᱬᲝᴍḾṀṂℳⱮⲘⲙꓟ𐊎𐊰𐌑𐌼𐒄𐊿𝚳𝛭𝜧𝝡🄜ꟽᎷ"),
		makeReplacement("m", "ⓜｍ𝐦𝖒𝒎𝓶𝕞𝚖𝗆𝗺𝙢𝘮𝔪ₘᵐ⒨ɯጠﾶɱᵯᶆḿṁṃꝳƜɰպᵚաꟺ౻"),
		makeReplacement("N", "Ⓝ🅝Ｎ𝐍𝕹𝑵𝓝ℕ𝙽𝖭𝗡𝙉𝘕🄽🅽🇳𝔑ᴺИÑŃŅŇŊƝǸɴΝᶰṄṆṈṊⲚⲛꓠꞐꞤ𐊏𐊪𐌽𝚴𝛮𝜨𝝢🄝ͶЍЙҊᴻΠ"),
		makeReplacement("n", "ⓝｎ𝐧𝖓𝒏𝓷𝕟𝚗𝗇𝗻𝙣𝘯𝔫ₙⁿ⒩ክ刀ñńņňŉŋƞǹɲɳήηղոռᵑᵰᶇṅṇṉṋᾐᾑᾒᾓᾔᾕᾖᾗῂῃῄῆῇꝴꞑꞥ𝛈𝜂𝜼𝝶ͷийѝҋսᴎ"),
		makeReplacement("O", "Ⓞ🅞Ｏ𝐎𝕺𝑶𝓞𝕆𝙾𝖮𝗢𝙊𝘖🄾🅾🇴𝔒ᴼÕØŌŎŐƟƠǑǾȌȎȪȬȮȰʘΌΘΟθϴОѲӦӨӪՕ᱐ᱛᲿṌṎṐṒỌỎỐỒỔỖỘὈὉὊὋὌὍỚỜỞỠỢῸΌⲐⲞⵔꓳꝊꝌ𐊒𐊨𐊫𐊸𐌈𐌏𐍈𐐄𐐬𐑴𐒆𐒠𐓂𐓃𐓪𐓫𑀞𑀣𝛉𝜃𝜽𝝷𝚯𝚶𝛩𝛰𝜣𝜪𝝝𝝤𝞗🄞𝚹𝛳𝜭𝝧੦ଠ௦౦ഠᎤᎧᎾᏅᏫꙨꙪ"),
		makeReplacement("o", "ⓞｏ𝐨𝖔𝒐𝓸𝕠𝚘𝗈𝗼𝙤𝘰𝔬ₒᵒ⒪ዐðõōŏőơǒǫǭǿȍȏȫȭȯȱοσόоѳӧөӫօᴏᴑṍṏṑṓọỏốồổỗộớờởỡợὀὁὂὃὄὅὸό⁰ℴⲑⲟⴰꝋꝍ𝛐𝜊𝝄𝝾૦൦๐໐༠࿀ဝ၀ꙩꙫ°º"),
		makeReplacement("P", "Ⓟ🅟Ｐ𝐏𝕻𝑷𝓟ℙ𝙿𝖯𝗣𝙋𝘗🄿🅿🇵𝔓ᴾꟼƤǷΡРҎᴘṔṖᴩῬ₱℗ⱣⲢⳀꓑꝐꝒꝤ𐊕𐌓𐐙𐌛𝚸𝛲𝜬𝝦🄟ꓒ𑀘ᏢꝔꝦ"),
		makeReplacement("p", "ⓟｐ𝐩𝖕𝒑𝓹𝕡𝚙𝗉𝗽𝙥𝘱𝔭ₚᵖ⒫የｱƥƿρрҏᵨᵱᵽᶈṕṗῤῥⲣꝑꝓꝥ𐓬𝛒𝜌𝝆𝞀ᑫᑬᑭᑮᑶᑷᑸᑹᒆᑴᑵᒅ⍴ꝕꝬꝭ"),
		makeReplacement("Q", "Ⓠ🅠Ｑ𝐐𝕼𝑸𝓠ℚ𝚀𝖰𝗤𝙌𝘘🅀🆀🇶𝔔ꝹϘǪǬϙԚꝖ𐊭𐌒🄠ႳႭꝘ"),
		makeReplacement("q", "ⓠｑ𝐪𝖖𝒒𝓺𝕢𝚚𝗊𝗾𝙦𝘲𝔮۹⒬ዒɊɋԛզꝗꝙ"),
		makeReplacement("R", "Ⓡ🅡Ｒ𝐑𝕽𝑹𝓡ℝ𝚁𝖱𝗥𝙍𝘙🅁🆁🇷ℜᴿᖈЯŔŖŘƦȐȒɌʀṚṜṞṘℛ℟ⱤꓣꞦꝶ🄬𐊯𐌺𐍂🄡ʁʶяᴙᴚꓤꞞꞟᎡᏒᖆᖇᖈᖉ®"),
		makeReplacement("r", "ⓡｒ𝐫𝖗𝒓𝓻𝕣𝚛𝗋𝗿𝙧𝘳𝔯ᵣʳ⒭ɹዪ尺ŕŗřȑȓɍɼɽրᵲᶉṙṛṝṟɺʴᏗꞧ"),
		makeReplacement("S", "Ⓢ🅢Ｓ𝐒𝕾𝑺𝓢𝕊𝚂𝖲𝗦𝙎𝘚🅂🆂🇸𝔖ᔆƧŚŜŞŠȘЅՏᲽṠṢṤṦṨⱾꓢꜱꞨ꠹𐊖𐌔𐑕𐒡𐍃𐐠𐒖🄢🄪ⴧϨᲷ₴Ꙅ𐒒𑀍ಽടႽჇᎦᏕᏚꚂ"),
		makeReplacement("s", "ⓢｓ𝐬𝖘𝒔𝓼𝕤𝚜𝗌𝘀𝙨𝘴𝔰ₛˢ⒮ƨነ丂śŝşšșȿʂѕᶊᶳṡṣṥṧṩꞩ𐑈ϩꙅ"),
		makeReplacement("T", "Ⓣ🅣Ｔ𝐓𝕿𝑻𝓣𝕋𝚃𝖳𝗧𝙏𝘛🅃🆃🇹𝔗ᵀ⊥ŢŤŦƬƮȚȾͲͳΤТтҬҭᴛṬṮṰṪ₮₸Ⲧⲧꓔ𐊗𐊱𐌕𐍄𝚻𝛵𝜯𝝩🄣ꓕꞱ𑀦ᎢꚐꚑ"),
		makeReplacement("t", "ⓣｔ𝐭𝖙𝒕𝓽𝕥𝚝𝗍𝘁𝙩𝘵𝔱ₜᵗ⒯ፕｲţťŧƭțʈԵեᵵᶵṫṭṯṱẗⱦᎿ"),
		makeReplacement("U", "Ⓤ🅤Ｕ𝐔𝖀𝑼𝓤𝕌𝚄𝖴𝗨𝙐𝘜🅄🆄🇺𝔘ᵁՈŨŪŬŮŰŲƯǓǕǗǙǛȔȖɄԱՄՍᴜṲṴṶṸṺỦỨỪỬỮỰỤꓴ𐌵𐒩𐓎𐓶🄤ՌꓵႮႶᏁᑗᑘᑙᑚᑛᑜᑧᑨ"),
		makeReplacement("u", "ⓤｕ𝐮𝖚𝒖𝓾𝕦𝚞𝗎𝘂𝙪𝘶𝔲ᵤᵘ⒰ሁũūŭůűųưǔǖǘǚǜȕȗևᶸṳṵṷṹṻụủứừửữự"),
		makeReplacement("V", "Ⓥ🅥Ｖ𝐕𝖁𝑽𝓥𝕍𝚅𝖵𝗩𝙑𝘝🅅🆅🇻𝔙ΛѴѶṼṾꓦ🄥ɅꓥᏙᏤ"),
		makeReplacement("v", "ⓥｖ𝐯𝖛𝒗𝓿𝕧𝚟𝗏𝘃𝙫𝘷𝔳ᵥᵛ⒱ʌሀ√ΰνυϋύϑѵѷṽṿὐὑὒὓὔὕὖὗὺύῠῡῢΰῦῧⱱⱽ𝛖𝜐𝝊𝞄𝛝𝜗𝝑𝞋𝛎𝜈𝝂𝝼ᴠᴧ"),
		makeReplacement("W", "Ⓦ🅦Ｗ𝐖𝖂𝑾𝓦𝕎𝚆𝖶𝗪𝙒𝘞🅆🆆🇼𝔚ᵂŴԜᗯᴡẀẂẄẆẈⱲꓪꞶ𐐎🄦ᎳᏔꝠ"),
		makeReplacement("w", "ⓦｗ𝐰𝖜𝒘𝔀𝕨𝚠𝗐𝘄𝙬𝘸𝔴ʷ⒲ሠŵωώѡѿԝẁẃẅẇẉẘὠὡὢὣὤὥὦὧὼώᾠᾡᾢᾣᾤᾥᾦᾧῲῳῴῶῷⱳꞷ𝛚𝜔𝝎𝞈𝛡𝜛𝝕𝞏Ꮗ⍹ꝡ"),
		makeReplacement("X", "Ⓧ🅧Ｘ𝐗𝖃𝑿𝓧𝕏𝚇𝖷𝗫𝙓𝘟🅇🆇🇽𝔛ᕽΧχХҲӼ᙭ᚷẊẌⲬⵝꓫꞳ𐊐𐊴𐌗𐍇𑀋𑀌𐌢🄧𝚾𝛸𝜲𝝬"),
		makeReplacement("x", "ⓧｘ𝐱𝖝𝒙𝔁𝕩𝚡𝗑𝘅𝙭𝘹𝔵ₓˣ⒳ሸﾒ×хҳӽ᙮ᵡᵪᶍẋẍⲭ𝛞𝜘𝝒𝞌𝛘𝜒𝝌𝞆"),
		makeReplacement("Y", "Ⓨ🅨Ｙ𝐘𝖄𝒀𝓨𝕐𝚈𝖸𝗬𝙔𝘠🅈🆈🇾𝔜⅄ÝŶŸƳȲɎʏΎΥΫϒϓϔУҮҰӮӰӲẎỲỴỶỸỾὙὛὝὟῨῩῪΎℽⲨꓬꝨꝩ𐊲𐌖𐍅🄨𝚼𝛶𝜰𝝪𑀢𐒅ᎩᎽᏲᏺ"),
		makeReplacement("y", "ⓨｙ𝐲𝖞𝒚𝔂𝕪𝚢𝗒𝘆𝙮𝘺𝔶ᵧʸ⒴ʎγሃﾘýÿŷƴȳɏЎуўүұӯӱӳᵞᶌẏẙỳỵỷỹỿⲩ𐒋𝛄𝛾𝜸𝝲λყჩꚔꚕ"),
		makeReplacement("Z", "Ⓩ🅩Ｚ𝐙𝖅𝒁𝓩ℤ𝚉𝖹𝗭𝙕𝘡🅉🆉🇿ℨŹŻŽƵȤΖẐẒẔⱫⱿⲌꓜꙀꙂ𐌶🄩𝚭𝛧𝜡𝝛𝞕Ꮓ"),
		makeReplacement("z", "ｚ𝐳𝖟𝒛𝔃𝕫𝚣𝗓𝘇𝙯𝘻𝔷₂ᶻ⒵ጊ乙źżžƶȥɀʐʑᙆᴢᵶᶎẑẓẕⱬⲍⴭꙁꙃⓩ"),
		makeReplacement("a/c", "℀"),
		makeReplacement("a/S", "℁"),
		makeReplacement("A/s", "⅍"),
		makeReplacement("c/u", "℆"),
		makeReplacement("c/o", "℅"),
		makeReplacement("V/m", "㏞"),
		makeReplacement("A/m", "㏟"),
		makeReplacement("SM", "℠"),
		makeReplacement("TM", "™"),
		makeReplacement("TEL", "℡"),
		makeReplacement("FAX", "℻"),
		makeReplacement("AE", "ÆǢǼӔᴁᴭ"),
		makeReplacement("ae", "æǣǽӕᴂᵆꬱ"),
		makeReplacement("IJ", "Ĳ"),
		makeReplacement("ij", "ĳ"),
		makeReplacement("CE", "Œɶ"),
		makeReplacement("LJ", "Ǉ"),
		makeReplacement("Lj", "ǈ"),
		makeReplacement("lj", "ǉ"),
		makeReplacement("DZ", "ǄǱ"),
		makeReplacement("Dz", "ǅǲ"),
		makeReplacement("dz", "ǆǳʣʤʥ"),
		makeReplacement("oe", "œꟹ"),
		makeReplacement("NJ", "Ǌ"),
		makeReplacement("Nj", "ǋ"),
		makeReplacement("nj", "ǌ"),
		makeReplacement("CD", "🄭"),
		makeReplacement("cd", "㏅"),
		makeReplacement("Wz", "🄮"),
		makeReplacement("HV", "🅊"),
		makeReplacement("MV", "🅋㎹"),
		makeReplacement("mV", "㎷㎶"),
		makeReplacement("SD", "🅌"),
		makeReplacement("SS", "🅍␎"),
		makeReplacement("PPV", "🅎"),
		makeReplacement("WC", "🅏🆏"),
		makeReplacement("IC", "🆋"),
		makeReplacement("PA", "🆌"),
		makeReplacement("Pa", "㎩"),
		makeReplacement("pA", "㎀"),
		makeReplacement("SA", "🆍"),
		makeReplacement("AB", "🆎"),
		makeReplacement("DJ", "🆐"),
		makeReplacement("CL", "🆑℄"),
		makeReplacement("COOL", "🆒"),
		makeReplacement("FREE", "🆓"),
		makeReplacement("ID", "🆔"),
		makeReplacement("NEW", "🆕"),
		makeReplacement("NG", "🆖"),
		makeReplacement("OK", "🆗"),
		makeReplacement("SOS", "🆘"),
		makeReplacement("UP!", "🆙"),
		makeReplacement("VS", "🆚"),
		makeReplacement("ts", "ʦ"),
		makeReplacement("fn", "ʩ"),
		makeReplacement("ls", "ʪ"),
		makeReplacement("lz", "ʫ"),
		makeReplacement("ww", "ʬ"),
		makeReplacement("gal", "㏿"),
		makeReplacement("OO", "ꝎꚘ"),
		makeReplacement("oo", "ꝏꚙꝏ"),
		makeReplacement("Oy", "Ѹ"),
		makeReplacement("oy", "ѹ"),
		makeReplacement("JX", "Ԕ"),
		makeReplacement("AA", "Ꜳ"),
		makeReplacement("aa", "ꜳ"),
		makeReplacement("AO", "Ꜵ"),
		makeReplacement("ao", "ꜵ"),
		makeReplacement("AU", "Ꜷ㍳"),
		makeReplacement("NUL", "␀"),
		makeReplacement("SOH", "␁"),
		makeReplacement("STX", "␂"),
		makeReplacement("ETX", "␃"),
		makeReplacement("EOT", "␄"),
		makeReplacement("ENQ", "␅"),
		makeReplacement("ACK", "␆"),
		makeReplacement("BEL", "␇"),
		makeReplacement("BS", "␈"),
		makeReplacement("HT", "␉"),
		makeReplacement("LF", "␊"),
		makeReplacement("VT", "␋"),
		makeReplacement("FF", "␌"),
		makeReplacement("CR", "␍"),
		makeReplacement("SI", "␏"),
		makeReplacement("DLE", "␐"),
		makeReplacement("DC1", "␑"),
		makeReplacement("DC2", "␒"),
		makeReplacement("DC3", "␓"),
		makeReplacement("DC4", "␔"),
		makeReplacement("NAK", "␕"),
		makeReplacement("SYN", "␖"),
		makeReplacement("ETB", "␗"),
		makeReplacement("CAN", "␘"),
		makeReplacement("EM", "␙"),
		makeReplacement("SUB", "␚"),
		makeReplacement("ESC", "␛"),
		makeReplacement("FS", "␜"),
		makeReplacement("GS", "␝"),
		makeReplacement("RS", "␞"),
		makeReplacement("US", "␟"),
		makeReplacement("SP", "␠"),
		makeReplacement("DEL", "␡"),
		makeReplacement("NL", "␤"),
		makeReplacement("hPa", "㍱"),
		makeReplacement("da", "㍲"),
		makeReplacement("au", "ꜷ"),
		makeReplacement("bar", "㍴"),
		makeReplacement("oV", "㍵"),
		makeReplacement("pc", "㍶"),
		makeReplacement("dm", "㍷"),
		makeReplacement("dm^2", "㍸"),
		makeReplacement("dm^3", "㍹"),
		makeReplacement("IU", "㍺"),
		makeReplacement("nA", "㎁"),
		makeReplacement("mA", "㎃㎂"),
		makeReplacement("kA", "㎄"),
		makeReplacement("KB", "㎅"),
		makeReplacement("MB", "㎆🝫"),
		makeReplacement("mb", "㏔"),
		makeReplacement("GB", "㎇"),
		makeReplacement("cal", "㎈"),
		makeReplacement("kcal", "㎉"),
		makeReplacement("pF", "㎊"),
		makeReplacement("nF", "㎋"),
		makeReplacement("mF", "㎌"),
		makeReplacement("mg", "㎎㎍"),
		makeReplacement("kg", "㎏"),
		makeReplacement("Hz", "㎐"),
		makeReplacement("kHz", "㎑"),
		makeReplacement("MHz", "㎒"),
		makeReplacement("GHz", "㎓"),
		makeReplacement("THz", "㎔"),
		makeReplacement("ml", "㎖㎕"),
		makeReplacement("dl", "㎗"),
		makeReplacement("kl", "㎘"),
		makeReplacement("fm", "㎙"),
		makeReplacement("nm", "㎚"),
		makeReplacement("mm", "㎜㎛"),
		makeReplacement("cm", "㎝"),
		makeReplacement("km", "㎞"),
		makeReplacement("KM", "㏎"),
		makeReplacement("mm^2", "㎟"),
		makeReplacement("cm^2", "㎠"),
		makeReplacement("m^2", "㎡"),
		makeReplacement("km^2", "㎢"),
		makeReplacement("mm^3", "㎣"),
		makeReplacement("cm^3", "㎤"),
		makeReplacement("m^3", "㎥"),
		makeReplacement("km^3", "㎦"),
		makeReplacement("m/s", "㎧"),
		makeReplacement("m/s^2", "㎨"),
		makeReplacement("kPa", "㎪"),
		makeReplacement("MPa", "㎫"),
		makeReplacement("GPa", "㎬"),
		makeReplacement("rad", "㎭"),
		makeReplacement("rad/s", "㎮"),
		makeReplacement("rad/s^2", "㎯"),
		makeReplacement("ps", "㎰"),
		makeReplacement("ns", "㎱"),
		makeReplacement("ms", "㎳㎲"),
		makeReplacement("pV", "㎴"),
		makeReplacement("nV", "㎵"),
		makeReplacement("kV", "㎸"),
		makeReplacement("pW", "㎺"),
		makeReplacement("nW", "㎻"),
		makeReplacement("mW", "㎽㎼"),
		makeReplacement("MW", "㎿"),
		makeReplacement("kW", "㎾"),
		makeReplacement("a.m.", "㏂"),
		makeReplacement("Bq", "㏃"),
		makeReplacement("cc", "㏄"),
		makeReplacement("C/kg", "㏆"),
		makeReplacement("Co.", "㏇"),
		makeReplacement("dB", "㏈"),
		makeReplacement("Gy", "㏉"),
		makeReplacement("ha", "㏊"),
		makeReplacement("in", "㏌"),
		makeReplacement("K.K.", "㏍"),
		makeReplacement("kt", "㏏"),
		makeReplacement("lm", "㏐"),
		makeReplacement("ln", "㏑"),
		makeReplacement("log", "㏒"),
		makeReplacement("lx", "㏓"),
		makeReplacement("mil", "㏕"),
		makeReplacement("mol", "㏖"),
		makeReplacement("pH", "㏗"),
		makeReplacement("p.m.", "㏘"),
		makeReplacement("PPM", "㏙"),
		makeReplacement("PR", "㏚"),
		makeReplacement("sr", "㏛"),
		makeReplacement("Sv", "㏜"),
		makeReplacement("Wb", "㏝"),
		makeReplacement("fl", "ﬂ"),
		makeReplacement("ff", "ﬀ"),
		makeReplacement("ffi", "ﬃ"),
		makeReplacement("ffl", "ﬄ"),
		makeReplacement("st", "ﬆ"),
		makeReplacement("ft", "ﬅ"),
		makeReplacement("ue", "ᵫ"),
		makeReplacement("ie", "ꭡ"),
		makeReplacement("eo", "ᴔ"),
		makeReplacement("uo", "ꭣ"),
		makeReplacement("AR", "🜇"),
		makeReplacement("VB", "🝬"),
		makeReplacement("aaa", "🝛"),
		makeReplacement("AV", "ꜸꜺ"),
		makeReplacement("av", "ꜹꜺ"),
		makeReplacement("AY", "Ꜽ"),
		makeReplacement("ay", "ꜽ"),
		makeReplacement("et", "🙰"),
		makeReplacement("fi", "ﬁ"),
		makeReplacement("ib", "℔"),
		makeReplacement("lL", "Ỻ"),
		makeReplacement("ll", "ỻ"),
		makeReplacement("ce", "ꭢ"),
		makeReplacement("Tz", "Ꜩ"),
		makeReplacement("tz", "ꜩ"),
		makeReplacement("db", "ȸ"),
		makeReplacement("qp", "ȹ"),
		makeReplacement("th", "ᵺ"),
		makeReplacement("ui", "ꭐ"),
		makeReplacement("0", "⓪⓿０𝟎𝟘𝟶𝟢𝟬₀⁰𝟶𝙾🄀🄁θ○௦൦๐໐༠࿀ဝ၀႐㍘"),
		makeReplacement("1", "①❶１𝟏𝟙𝟷𝟣𝟭₁¹⑴⇂⥜⒈🄂⓵ΑⅠⅰ˦⥑႑㍙㏠ꝇ"),
		makeReplacement("2", "②❷２𝟐𝟚𝟸𝟤𝟮₂²⑵ᘔ𝖲⒉🄃⓶ΒⅡⅱϨջᒾᒿ㍚㏡↊"),
		makeReplacement("3", "③❸３𝟑𝟛𝟹𝟥𝟯₃³⑶ƐᏋ⒊🄄⓷ΓⅢⅲՅჳ౩ဒ႓ვკ㍛㏢↋ꝢꝣꝪꝫꞫ"),
		makeReplacement("4", "④❹４𝟒𝟜𝟺𝟦𝟰₄⁴⑷𝗁ᖸ⒋🄅⓸ΔⅣⅳϤʮ႔ႹᏎ㍜㏣"),
		makeReplacement("5", "⑤❺５𝟓𝟝𝟻𝟧𝟱₅⁵⑸𝖲ट⒌🄆⓹ΕⅤⅴƼҕཏ႕㍝㏤"),
		makeReplacement("6", "⑥❻６𝟔𝟞𝟼𝟨𝟲₆⁶⑹𝟿მ⒍🄇⓺ϚⅥⅵδϭ႖მᏮ㍞㏥ꝺ"),
		makeReplacement("7", "⑦❼７𝟕𝟟𝟽𝟩𝟳₇⁷⑺ረ٢⒎🄈⓻ΖⅦⅶ𐒇⁊႗㍟㏦"),
		makeReplacement("8", "⑧❽８𝟖𝟠𝟾𝟪𝟴₈⁸⑻𝟾৪⒏🄉⓼ΗⅧⅷϐზ႘㍠㏧"),
		makeReplacement("9", "⑨❾９𝟗𝟡𝟿𝟫𝟵₉⁹⑼𝟼♇⒐🄊⓽ΘⅨⅸƍ𝚐୨୧౸႙ნᏭ㍡㏨ꝰ"),
		makeReplacement("10", "⑩❿⑽⒑⓾ΙⅩⅹ㉈㍢㏩"),
		makeReplacement("11", "⑪⓫⑾⒒Ⅺⅺ㍣㏪"),
		makeReplacement("12", "⑫⓬⑿⒓Ⅻⅻ㍤㏫"),
		makeReplacement("13", "⑬⓭⒀⒔㍥㏬"),
		makeReplacement("14", "⑭⓮⒁⒕㍦㏭"),
		makeReplacement("15", "⑮⓯⒂⒖㍧㏮"),
		makeReplacement("16", "⑯⓰⒃⒗㍨㏯"),
		makeReplacement("17", "⑰⓱⒄⒘㍩㏰"),
		makeReplacement("18", "⑱⓲⒅⒙㍪㏱"),
		makeReplacement("19", "⑲⓳⒆⒚㍫㏲"),
		makeReplacement("20", "⑳⓴⒇⒛Κ㉉㍬㏳"),
		makeReplacement("21", "㉑㍭㏴"),
		makeReplacement("22", "㉒㍮㏵"),
		makeReplacement("23", "㉓㍯㏶"),
		makeReplacement("24", "㉔㍰㏷"),
		makeReplacement("25", "㉕㏸"),
		makeReplacement("26", "㉖㏹"),
		makeReplacement("27", "㉗㏺"),
		makeReplacement("28", "㉘㏻"),
		makeReplacement("29", "㉙㏼"),
		makeReplacement("30", "㉚Λ㉊㏽"),
		makeReplacement("31", "㉛㏾"),
		makeReplacement("32", "㉜"),
		makeReplacement("33", "㉝"),
		makeReplacement("34", "㉞"),
		makeReplacement("35", "㉟"),
		makeReplacement("36", "㊱"),
		makeReplacement("37", "㊲"),
		makeReplacement("38", "㊳"),
		makeReplacement("39", "㊴"),
		makeReplacement("40", "㊵Μ㉋"),
		makeReplacement("41", "㊶"),
		makeReplacement("42", "㊷"),
		makeReplacement("43", "㊸"),
		makeReplacement("44", "㊹"),
		makeReplacement("45", "㊺"),
		makeReplacement("46", "㊻"),
		makeReplacement("47", "㊼"),
		makeReplacement("48", "㊽"),
		makeReplacement("49", "㊾"),
		makeReplacement("50", "㊿Ν㉌"),
		makeReplacement("60", "Ξ㉍"),
		makeReplacement("70", "Ο㉎"),
		makeReplacement("80", "㉏"),
		makeReplacement("90", "Ϟ"),
		makeReplacement("100", "Ⅽⅽ"),
		makeReplacement("500", "Ⅾⅾ"),
		makeReplacement("1000", "Ⅿⅿↀ"),
		makeReplacement("5000", "ↁ"),
		makeReplacement("10000", "ↂ"),
		makeReplacement("50000", "ↇ"),
		makeReplacement("100000", "ↈ"),
		makeReplacement("1/4", "¼"),
		makeReplacement("1/2", "½"),
		makeReplacement("3/4", "¾"),
		makeReplacement("1/7", "⅐"),
		makeReplacement("1/9", "⅑"),
		makeReplacement("1/10", "⅒"),
		makeReplacement("1/3", "⅓"),
		makeReplacement("2/3", "⅔"),
		makeReplacement("1/5", "⅕"),
		makeReplacement("2/5", "⅖"),
		makeReplacement("3/5", "⅗"),
		makeReplacement("4/5", "⅘"),
		makeReplacement("1/6", "⅙"),
		makeReplacement("5/6", "⅚"),
		makeReplacement("1/8", "⅛"),
		makeReplacement("3/8", "⅜"),
		makeReplacement("5/8", "⅝"),
		makeReplacement("7/8", "⅞"),
		makeReplacement("1/", "⅟"),
		makeReplacement("0/3", "↉"),
		makeReplacement(" ", "␣               　"),
		makeReplacement("'", "ʹʻʼʽʾʿˊˋ˴ʹՙ՚՛՜՝᾽᾿´῾′‵｀Ꞌꞌ΄＇ˈᑊᛌ‘’‛´"),
		makeReplacement("-", "‐‑‒–—―⁃⁻₋−─━ⲻꟷ➖˗﹘Ⲻ-⨩⨪⨫⨬－ "),
		makeReplacement("=", "˭⁼₌꞊᐀⹀゠꓿≐≑≒≓≔≕≖≗≘≙≚≛≜≝≞≟≠＝"),
		makeReplacement("\"", "ʺˮ˵˶῍῎῝῞“”„‟″‴‶‷＂〃᳓˝"),
		makeReplacement("+", "⁺₊𐊛➕᛭⨢⨣⨤⨥⨦⨧⨨"),
		makeReplacement("~", "˷῀⁓∼∽∾˜∻∿⸞⸟～"),
		makeReplacement("<", "˂‹ᚲᐸ❮≺⋖❰⟨❬⧼⩹⩻⪪"),
		makeReplacement(">", "˃›ᐳ❯≻⋗❱⟩❭⧽⩺⩼⪫"),
		makeReplacement("\\", "∖＼⼂㇔⧵丶﹨⧹⟍"),
		makeReplacement("/", "⁄⼃Ⳇ⟋ノ╱〳∕⧸÷"),
		makeReplacement(":", "˸꞉։᛬︰ː∶：⁚ꓽ"),
		makeReplacement(",", "⸲⹁¸ˌˎˏ͵ι‚٫ꓹ⸴，、"),
		makeReplacement("_", "ˍ＿﹍﹎﹏"),
		makeReplacement("?", "❓❔¿⸮ॽ␦⸘"),
		makeReplacement("	", "⇥⇤⇆↹"),
		makeReplacement("!", "❗❕¡ǃⵑ！"),
		makeReplacement("(", "⁽₍❲〔❨﴾❪⟮（"),
		makeReplacement(")", "⁾₎❳〕❩﴿❫⟯）"),
		makeReplacement("^", "＾˄ˆ"),
		makeReplacement("*", "⁎∗༝⋆"),
		makeReplacement("...", "…"),
		makeReplacement(";", "⸵⁏;⁏"),
		makeReplacement("!!", "‼"),
		makeReplacement("??", "⁇"),
		makeReplacement("?!", "⁈"),
		makeReplacement("!?", "⁉"),
		makeReplacement("%", "⁒٪"),
		makeReplacement("[", "［"),
		makeReplacement("]", "］"),
		makeReplacement("{", "❴𝄔❴"),
		makeReplacement("}", "❵❵"),
		makeReplacement("..", "‥"),
		makeReplacement(".", "․ꓸ．"),
		makeReplacement("&", "ꝸ"),
		makeReplacement("#", "＃"),
		makeReplacement("", "​‌‍‎‏"),
	}
)

func NickOrUsername(nick, username string) string {
	if nick != "" {
		return nick
	} else {
		return username
	}
}

func Normalize(str string) string {
	for _, replacement := range replacements {
		for _, char := range replacement.special {
			str = strings.ReplaceAll(str, char, replacement.normal)
		}
	}
	return str
}

func NormalizeNickname(gid discord.GuildID, uid discord.UserID, nick string) bool {
	normalizedNick := Normalize(nick)

	if normalizedNick != nick {
		data := api.ModifyMemberData{Nick: option.NewString(normalizedNick), AuditLogReason: api.AuditLogReason("Normalize nickname")}
		err := s.ModifyMember(gid, uid, data)
		logger.LogIfErr(err)
		return true
	}
	return false
}
