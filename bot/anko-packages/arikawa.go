// Code generated by anko-package-gen2 --name arikawa --pkg github.com/diamondburned/arikawa/v3 -v v3.0.0-rc.2.0.20210924043750-e203e31ab398. DO NOT EDIT.

package packages

import (
	"reflect"

	"github.com/mattn/anko/env"

	"github.com/diamondburned/arikawa/v3/api"
	"github.com/diamondburned/arikawa/v3/api/rate"
	"github.com/diamondburned/arikawa/v3/api/webhook"
	"github.com/diamondburned/arikawa/v3/discord"
	"github.com/diamondburned/arikawa/v3/gateway"
	"github.com/diamondburned/arikawa/v3/gateway/shard"
	"github.com/diamondburned/arikawa/v3/session"
	"github.com/diamondburned/arikawa/v3/state"
	"github.com/diamondburned/arikawa/v3/state/store"
	"github.com/diamondburned/arikawa/v3/state/store/defaultstore"
	"github.com/diamondburned/arikawa/v3/utils/bot"
	"github.com/diamondburned/arikawa/v3/utils/bot/extras/arguments"
	"github.com/diamondburned/arikawa/v3/utils/bot/extras/infer"
	"github.com/diamondburned/arikawa/v3/utils/bot/extras/middlewares"
	"github.com/diamondburned/arikawa/v3/utils/bot/extras/shellwords"
	"github.com/diamondburned/arikawa/v3/utils/handler"
	"github.com/diamondburned/arikawa/v3/utils/httputil"
	"github.com/diamondburned/arikawa/v3/utils/httputil/httpdriver"
	"github.com/diamondburned/arikawa/v3/utils/json"
	"github.com/diamondburned/arikawa/v3/utils/json/enum"
	"github.com/diamondburned/arikawa/v3/utils/json/option"
	"github.com/diamondburned/arikawa/v3/utils/sendpart"
	"github.com/diamondburned/arikawa/v3/utils/wsutil"
	"github.com/diamondburned/arikawa/v3/voice"
	"github.com/diamondburned/arikawa/v3/voice/udp"
	"github.com/diamondburned/arikawa/v3/voice/voicegateway"
)

func init() {
	initArikawaApi()
	initArikawaApiRate()
	initArikawaApiWebhook()
	initArikawaDiscord()
	initArikawaGateway()
	initArikawaGatewayShard()
	initArikawaSession()
	initArikawaState()
	initArikawaStateStore()
	initArikawaStateStoreDefaultstore()
	initArikawaUtilsBot()
	initArikawaUtilsBotExtrasArguments()
	initArikawaUtilsBotExtrasInfer()
	initArikawaUtilsBotExtrasMiddlewares()
	initArikawaUtilsBotExtrasShellwords()
	initArikawaUtilsHandler()
	initArikawaUtilsHttputil()
	initArikawaUtilsHttputilHttpdriver()
	initArikawaUtilsJson()
	initArikawaUtilsJsonEnum()
	initArikawaUtilsJsonOption()
	initArikawaUtilsSendpart()
	initArikawaUtilsWsutil()
	initArikawaVoice()
	initArikawaVoiceUdp()
	initArikawaVoiceVoicegateway()
}

func initArikawaApi() {
	env.Packages["github.com/diamondburned/arikawa/v3/api"] = map[string]reflect.Value{
		// constants
		"AllowEveryoneMention":                 reflect.ValueOf(api.AllowEveryoneMention),
		"AllowRoleMention":                     reflect.ValueOf(api.AllowRoleMention),
		"AllowUserMention":                     reflect.ValueOf(api.AllowUserMention),
		"AttachmentSpoilerPrefix":              reflect.ValueOf(api.AttachmentSpoilerPrefix),
		"DeferredMessageInteractionWithSource": reflect.ValueOf(api.DeferredMessageInteractionWithSource),
		"DeferredMessageUpdate":                reflect.ValueOf(api.DeferredMessageUpdate),
		"EphemeralResponse":                    reflect.ValueOf(api.EphemeralResponse),
		"GuildBanner1":                         reflect.ValueOf(api.GuildBanner1),
		"GuildBanner2":                         reflect.ValueOf(api.GuildBanner2),
		"GuildBanner3":                         reflect.ValueOf(api.GuildBanner3),
		"GuildBanner4":                         reflect.ValueOf(api.GuildBanner4),
		"GuildShield":                          reflect.ValueOf(api.GuildShield),
		"MaxGuildFetchLimit":                   reflect.ValueOf(api.MaxGuildFetchLimit),
		"MaxMemberFetchLimit":                  reflect.ValueOf(api.MaxMemberFetchLimit),
		"MaxMessageReactionFetchLimit":         reflect.ValueOf(api.MaxMessageReactionFetchLimit),
		"MessageInteractionWithSource":         reflect.ValueOf(api.MessageInteractionWithSource),
		"PongInteraction":                      reflect.ValueOf(api.PongInteraction),
		"UpdateMessage":                        reflect.ValueOf(api.UpdateMessage),

		// variables
		"BaseEndpoint":           reflect.ValueOf(api.BaseEndpoint),
		"Endpoint":               reflect.ValueOf(api.Endpoint),
		"EndpointApplications":   reflect.ValueOf(api.EndpointApplications),
		"EndpointAuth":           reflect.ValueOf(api.EndpointAuth),
		"EndpointChannels":       reflect.ValueOf(api.EndpointChannels),
		"EndpointGateway":        reflect.ValueOf(api.EndpointGateway),
		"EndpointGatewayBot":     reflect.ValueOf(api.EndpointGatewayBot),
		"EndpointGuilds":         reflect.ValueOf(api.EndpointGuilds),
		"EndpointInteractions":   reflect.ValueOf(api.EndpointInteractions),
		"EndpointInvites":        reflect.ValueOf(api.EndpointInvites),
		"EndpointLogin":          reflect.ValueOf(api.EndpointLogin),
		"EndpointMe":             reflect.ValueOf(api.EndpointMe),
		"EndpointStageInstances": reflect.ValueOf(api.EndpointStageInstances),
		"EndpointTOTP":           reflect.ValueOf(api.EndpointTOTP),
		"EndpointUsers":          reflect.ValueOf(api.EndpointUsers),
		"EndpointWebhooks":       reflect.ValueOf(api.EndpointWebhooks),
		"ErrEmptyMessage":        reflect.ValueOf(api.ErrEmptyMessage),
		"ErrInvalidImageCT":      reflect.ValueOf(api.ErrInvalidImageCT),
		"ErrInvalidImageData":    reflect.ValueOf(api.ErrInvalidImageData),
		"Path":                   reflect.ValueOf(api.Path),
		"UserAgent":              reflect.ValueOf(api.UserAgent),
		"Version":                reflect.ValueOf(api.Version),

		// functions
		"DecodeImage":     reflect.ValueOf(api.DecodeImage),
		"GatewayURL":      reflect.ValueOf(api.GatewayURL),
		"NewClient":       reflect.ValueOf(api.NewClient),
		"NewCustomClient": reflect.ValueOf(api.NewCustomClient),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/api"] = map[string]reflect.Type{
		"Ack":                             reflect.TypeOf((*api.Ack)(nil)).Elem(),
		"ActiveThreads":                   reflect.TypeOf((*api.ActiveThreads)(nil)).Elem(),
		"AddMemberData":                   reflect.TypeOf((*api.AddMemberData)(nil)).Elem(),
		"AddRoleData":                     reflect.TypeOf((*api.AddRoleData)(nil)).Elem(),
		"AllowedMentionType":              reflect.TypeOf((*api.AllowedMentionType)(nil)).Elem(),
		"AllowedMentions":                 reflect.TypeOf((*api.AllowedMentions)(nil)).Elem(),
		"ArchivedThread":                  reflect.TypeOf((*api.ArchivedThread)(nil)).Elem(),
		"AuditLogData":                    reflect.TypeOf((*api.AuditLogData)(nil)).Elem(),
		"AuditLogReason":                  reflect.TypeOf((*api.AuditLogReason)(nil)).Elem(),
		"BanData":                         reflect.TypeOf((*api.BanData)(nil)).Elem(),
		"BatchEditCommandPermissionsData": reflect.TypeOf((*api.BatchEditCommandPermissionsData)(nil)).Elem(),
		"BotData":                         reflect.TypeOf((*api.BotData)(nil)).Elem(),
		"Client":                          reflect.TypeOf((*api.Client)(nil)).Elem(),
		"CreateChannelData":               reflect.TypeOf((*api.CreateChannelData)(nil)).Elem(),
		"CreateCommandData":               reflect.TypeOf((*api.CreateCommandData)(nil)).Elem(),
		"CreateEmojiData":                 reflect.TypeOf((*api.CreateEmojiData)(nil)).Elem(),
		"CreateGuildData":                 reflect.TypeOf((*api.CreateGuildData)(nil)).Elem(),
		"CreateInviteData":                reflect.TypeOf((*api.CreateInviteData)(nil)).Elem(),
		"CreateRoleData":                  reflect.TypeOf((*api.CreateRoleData)(nil)).Elem(),
		"CreateStageInstanceData":         reflect.TypeOf((*api.CreateStageInstanceData)(nil)).Elem(),
		"CreateWebhookData":               reflect.TypeOf((*api.CreateWebhookData)(nil)).Elem(),
		"EditChannelPermissionData":       reflect.TypeOf((*api.EditChannelPermissionData)(nil)).Elem(),
		"EditInteractionResponseData":     reflect.TypeOf((*api.EditInteractionResponseData)(nil)).Elem(),
		"EditMessageData":                 reflect.TypeOf((*api.EditMessageData)(nil)).Elem(),
		"GuildWidgetImageStyle":           reflect.TypeOf((*api.GuildWidgetImageStyle)(nil)).Elem(),
		"Image":                           reflect.TypeOf((*api.Image)(nil)).Elem(),
		"ImageTooLargeError":              reflect.TypeOf((*api.ImageTooLargeError)(nil)).Elem(),
		"InteractionResponse":             reflect.TypeOf((*api.InteractionResponse)(nil)).Elem(),
		"InteractionResponseData":         reflect.TypeOf((*api.InteractionResponseData)(nil)).Elem(),
		"InteractionResponseFlags":        reflect.TypeOf((*api.InteractionResponseFlags)(nil)).Elem(),
		"InteractionResponseType":         reflect.TypeOf((*api.InteractionResponseType)(nil)).Elem(),
		"JoinedInvite":                    reflect.TypeOf((*api.JoinedInvite)(nil)).Elem(),
		"LoginResponse":                   reflect.TypeOf((*api.LoginResponse)(nil)).Elem(),
		"ModifyChannelData":               reflect.TypeOf((*api.ModifyChannelData)(nil)).Elem(),
		"ModifyEmojiData":                 reflect.TypeOf((*api.ModifyEmojiData)(nil)).Elem(),
		"ModifyGuildData":                 reflect.TypeOf((*api.ModifyGuildData)(nil)).Elem(),
		"ModifyGuildWidgetData":           reflect.TypeOf((*api.ModifyGuildWidgetData)(nil)).Elem(),
		"ModifyIntegrationData":           reflect.TypeOf((*api.ModifyIntegrationData)(nil)).Elem(),
		"ModifyMemberData":                reflect.TypeOf((*api.ModifyMemberData)(nil)).Elem(),
		"ModifyRoleData":                  reflect.TypeOf((*api.ModifyRoleData)(nil)).Elem(),
		"ModifySelfData":                  reflect.TypeOf((*api.ModifySelfData)(nil)).Elem(),
		"ModifyWebhookData":               reflect.TypeOf((*api.ModifyWebhookData)(nil)).Elem(),
		"MoveChannelData":                 reflect.TypeOf((*api.MoveChannelData)(nil)).Elem(),
		"MoveChannelsData":                reflect.TypeOf((*api.MoveChannelsData)(nil)).Elem(),
		"MoveRoleData":                    reflect.TypeOf((*api.MoveRoleData)(nil)).Elem(),
		"MoveRolesData":                   reflect.TypeOf((*api.MoveRolesData)(nil)).Elem(),
		"PruneCountData":                  reflect.TypeOf((*api.PruneCountData)(nil)).Elem(),
		"PruneData":                       reflect.TypeOf((*api.PruneData)(nil)).Elem(),
		"SearchData":                      reflect.TypeOf((*api.SearchData)(nil)).Elem(),
		"SearchResponse":                  reflect.TypeOf((*api.SearchResponse)(nil)).Elem(),
		"SendMessageData":                 reflect.TypeOf((*api.SendMessageData)(nil)).Elem(),
		"Session":                         reflect.TypeOf((*api.Session)(nil)).Elem(),
		"SessionStartLimit":               reflect.TypeOf((*api.SessionStartLimit)(nil)).Elem(),
		"StartThreadData":                 reflect.TypeOf((*api.StartThreadData)(nil)).Elem(),
		"UpdateStageInstanceData":         reflect.TypeOf((*api.UpdateStageInstanceData)(nil)).Elem(),
	}
}

func initArikawaApiRate() {
	env.Packages["github.com/diamondburned/arikawa/v3/api/rate"] = map[string]reflect.Value{
		// constants
		"ExtraDelay": reflect.ValueOf(rate.ExtraDelay),

		// variables
		"ErrTimedOutEarly": reflect.ValueOf(rate.ErrTimedOutEarly),
		"MajorRootPaths":   reflect.ValueOf(rate.MajorRootPaths),

		// functions
		"EmojiRune":           reflect.ValueOf(rate.EmojiRune),
		"NewLimiter":          reflect.ValueOf(rate.NewLimiter),
		"ParseBucketKey":      reflect.ValueOf(rate.ParseBucketKey),
		"StringIsCustomEmoji": reflect.ValueOf(rate.StringIsCustomEmoji),
		"StringIsEmojiOnly":   reflect.ValueOf(rate.StringIsEmojiOnly),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/api/rate"] = map[string]reflect.Type{
		"AcquireOptions":  reflect.TypeOf((*rate.AcquireOptions)(nil)).Elem(),
		"CustomRateLimit": reflect.TypeOf((*rate.CustomRateLimit)(nil)).Elem(),
		"Limiter":         reflect.TypeOf((*rate.Limiter)(nil)).Elem(),
	}
}

func initArikawaApiWebhook() {
	env.Packages["github.com/diamondburned/arikawa/v3/api/webhook"] = map[string]reflect.Value{
		// constants

		// variables

		// functions
		"FromAPI":   reflect.ValueOf(webhook.FromAPI),
		"New":       reflect.ValueOf(webhook.New),
		"NewCustom": reflect.ValueOf(webhook.NewCustom),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/api/webhook"] = map[string]reflect.Type{
		"Client":          reflect.TypeOf((*webhook.Client)(nil)).Elem(),
		"EditMessageData": reflect.TypeOf((*webhook.EditMessageData)(nil)).Elem(),
		"ExecuteData":     reflect.TypeOf((*webhook.ExecuteData)(nil)).Elem(),
		"Session":         reflect.TypeOf((*webhook.Session)(nil)).Elem(),
	}
}

func initArikawaDiscord() {
	env.Packages["github.com/diamondburned/arikawa/v3/discord"] = map[string]reflect.Value{
		// constants
		"ActionRowComponentType":                  reflect.ValueOf(discord.ActionRowComponentType),
		"AllMembers":                              reflect.ValueOf(discord.AllMembers),
		"AllMessages":                             reflect.ValueOf(discord.AllMessages),
		"AnimatedIcon":                            reflect.ValueOf(discord.AnimatedIcon),
		"ArticleEmbed":                            reflect.ValueOf(discord.ArticleEmbed),
		"AuditAnyID":                              reflect.ValueOf(discord.AuditAnyID),
		"AuditAnyType":                            reflect.ValueOf(discord.AuditAnyType),
		"AuditChannelApplicationID":               reflect.ValueOf(discord.AuditChannelApplicationID),
		"AuditChannelBitrate":                     reflect.ValueOf(discord.AuditChannelBitrate),
		"AuditChannelNSFW":                        reflect.ValueOf(discord.AuditChannelNSFW),
		"AuditChannelPermissionOverwrites":        reflect.ValueOf(discord.AuditChannelPermissionOverwrites),
		"AuditChannelPosition":                    reflect.ValueOf(discord.AuditChannelPosition),
		"AuditChannelRateLimitPerUser":            reflect.ValueOf(discord.AuditChannelRateLimitPerUser),
		"AuditChannelTopic":                       reflect.ValueOf(discord.AuditChannelTopic),
		"AuditGuildAFKChannelID":                  reflect.ValueOf(discord.AuditGuildAFKChannelID),
		"AuditGuildAFKTimeout":                    reflect.ValueOf(discord.AuditGuildAFKTimeout),
		"AuditGuildExplicitFilter":                reflect.ValueOf(discord.AuditGuildExplicitFilter),
		"AuditGuildIconHash":                      reflect.ValueOf(discord.AuditGuildIconHash),
		"AuditGuildMFA":                           reflect.ValueOf(discord.AuditGuildMFA),
		"AuditGuildName":                          reflect.ValueOf(discord.AuditGuildName),
		"AuditGuildNotification":                  reflect.ValueOf(discord.AuditGuildNotification),
		"AuditGuildOwnerID":                       reflect.ValueOf(discord.AuditGuildOwnerID),
		"AuditGuildPruneDeleteDays":               reflect.ValueOf(discord.AuditGuildPruneDeleteDays),
		"AuditGuildRegion":                        reflect.ValueOf(discord.AuditGuildRegion),
		"AuditGuildRoleAdd":                       reflect.ValueOf(discord.AuditGuildRoleAdd),
		"AuditGuildRoleRemove":                    reflect.ValueOf(discord.AuditGuildRoleRemove),
		"AuditGuildSplashHash":                    reflect.ValueOf(discord.AuditGuildSplashHash),
		"AuditGuildSystemChannelID":               reflect.ValueOf(discord.AuditGuildSystemChannelID),
		"AuditGuildVanityURLCode":                 reflect.ValueOf(discord.AuditGuildVanityURLCode),
		"AuditGuildVerification":                  reflect.ValueOf(discord.AuditGuildVerification),
		"AuditGuildWidgetChannelID":               reflect.ValueOf(discord.AuditGuildWidgetChannelID),
		"AuditGuildWidgetEnabled":                 reflect.ValueOf(discord.AuditGuildWidgetEnabled),
		"AuditIntegrationEnableEmoticons":         reflect.ValueOf(discord.AuditIntegrationEnableEmoticons),
		"AuditIntegrationExpireBehavior":          reflect.ValueOf(discord.AuditIntegrationExpireBehavior),
		"AuditIntegrationExpireGracePeriod":       reflect.ValueOf(discord.AuditIntegrationExpireGracePeriod),
		"AuditInviteChannelID":                    reflect.ValueOf(discord.AuditInviteChannelID),
		"AuditInviteCode":                         reflect.ValueOf(discord.AuditInviteCode),
		"AuditInviteInviterID":                    reflect.ValueOf(discord.AuditInviteInviterID),
		"AuditInviteMaxAge":                       reflect.ValueOf(discord.AuditInviteMaxAge),
		"AuditInviteMaxUses":                      reflect.ValueOf(discord.AuditInviteMaxUses),
		"AuditInviteTemporary":                    reflect.ValueOf(discord.AuditInviteTemporary),
		"AuditInviteUses":                         reflect.ValueOf(discord.AuditInviteUses),
		"AuditRoleAllow":                          reflect.ValueOf(discord.AuditRoleAllow),
		"AuditRoleColor":                          reflect.ValueOf(discord.AuditRoleColor),
		"AuditRoleDeny":                           reflect.ValueOf(discord.AuditRoleDeny),
		"AuditRoleHoist":                          reflect.ValueOf(discord.AuditRoleHoist),
		"AuditRoleMentionable":                    reflect.ValueOf(discord.AuditRoleMentionable),
		"AuditRolePermissions":                    reflect.ValueOf(discord.AuditRolePermissions),
		"AuditUserAvatarHash":                     reflect.ValueOf(discord.AuditUserAvatarHash),
		"AuditUserDeaf":                           reflect.ValueOf(discord.AuditUserDeaf),
		"AuditUserMute":                           reflect.ValueOf(discord.AuditUserMute),
		"AuditUserNick":                           reflect.ValueOf(discord.AuditUserNick),
		"AutoImage":                               reflect.ValueOf(discord.AutoImage),
		"AutoVideoQuality":                        reflect.ValueOf(discord.AutoVideoQuality),
		"Banner":                                  reflect.ValueOf(discord.Banner),
		"BlockedRelationship":                     reflect.ValueOf(discord.BlockedRelationship),
		"BooleanOption":                           reflect.ValueOf(discord.BooleanOption),
		"BotAdd":                                  reflect.ValueOf(discord.BotAdd),
		"BugHunterLvl1":                           reflect.ValueOf(discord.BugHunterLvl1),
		"BugHunterLvl2":                           reflect.ValueOf(discord.BugHunterLvl2),
		"ButtonComponentType":                     reflect.ValueOf(discord.ButtonComponentType),
		"CallMessage":                             reflect.ValueOf(discord.CallMessage),
		"CertifiedModerator":                      reflect.ValueOf(discord.CertifiedModerator),
		"ChannelCreate":                           reflect.ValueOf(discord.ChannelCreate),
		"ChannelDelete":                           reflect.ValueOf(discord.ChannelDelete),
		"ChannelFollowAddMessage":                 reflect.ValueOf(discord.ChannelFollowAddMessage),
		"ChannelFollowerWebhook":                  reflect.ValueOf(discord.ChannelFollowerWebhook),
		"ChannelIconChangeMessage":                reflect.ValueOf(discord.ChannelIconChangeMessage),
		"ChannelNameChangeMessage":                reflect.ValueOf(discord.ChannelNameChangeMessage),
		"ChannelOption":                           reflect.ValueOf(discord.ChannelOption),
		"ChannelOverwriteCreate":                  reflect.ValueOf(discord.ChannelOverwriteCreate),
		"ChannelOverwriteDelete":                  reflect.ValueOf(discord.ChannelOverwriteDelete),
		"ChannelOverwriteUpdate":                  reflect.ValueOf(discord.ChannelOverwriteUpdate),
		"ChannelPinnedMessage":                    reflect.ValueOf(discord.ChannelPinnedMessage),
		"ChannelUpdate":                           reflect.ValueOf(discord.ChannelUpdate),
		"ChatInputCommand":                        reflect.ValueOf(discord.ChatInputCommand),
		"ChatInputCommandMessage":                 reflect.ValueOf(discord.ChatInputCommandMessage),
		"CommandInteraction":                      reflect.ValueOf(discord.CommandInteraction),
		"Commerce":                                reflect.ValueOf(discord.Commerce),
		"ComponentInteraction":                    reflect.ValueOf(discord.ComponentInteraction),
		"ConnectionNotVisible":                    reflect.ValueOf(discord.ConnectionNotVisible),
		"ConnectionVisibleEveryone":               reflect.ValueOf(discord.ConnectionVisibleEveryone),
		"ContextMenuCommand":                      reflect.ValueOf(discord.ContextMenuCommand),
		"CrosspostedMessage":                      reflect.ValueOf(discord.CrosspostedMessage),
		"CustomActivity":                          reflect.ValueOf(discord.CustomActivity),
		"DangerButton":                            reflect.ValueOf(discord.DangerButton),
		"DefaultMaxPresences":                     reflect.ValueOf(discord.DefaultMaxPresences),
		"DefaultMessage":                          reflect.ValueOf(discord.DefaultMessage),
		"DirectMessage":                           reflect.ValueOf(discord.DirectMessage),
		"DiscordService":                          reflect.ValueOf(discord.DiscordService),
		"Discoverable":                            reflect.ValueOf(discord.Discoverable),
		"DoNotDisturbStatus":                      reflect.ValueOf(discord.DoNotDisturbStatus),
		"EarlySupporter":                          reflect.ValueOf(discord.EarlySupporter),
		"ElevatedMFA":                             reflect.ValueOf(discord.ElevatedMFA),
		"EmojiCreate":                             reflect.ValueOf(discord.EmojiCreate),
		"EmojiDelete":                             reflect.ValueOf(discord.EmojiDelete),
		"EmojiUpdate":                             reflect.ValueOf(discord.EmojiUpdate),
		"Employee":                                reflect.ValueOf(discord.Employee),
		"EphemeralMessage":                        reflect.ValueOf(discord.EphemeralMessage),
		"Epoch":                                   reflect.ValueOf(discord.Epoch),
		"Featurable":                              reflect.ValueOf(discord.Featurable),
		"FriendRelationship":                      reflect.ValueOf(discord.FriendRelationship),
		"FullVideoQuality":                        reflect.ValueOf(discord.FullVideoQuality),
		"GIFImage":                                reflect.ValueOf(discord.GIFImage),
		"GIFVEmbed":                               reflect.ValueOf(discord.GIFVEmbed),
		"GameActivity":                            reflect.ValueOf(discord.GameActivity),
		"GroupDM":                                 reflect.ValueOf(discord.GroupDM),
		"GuildCategory":                           reflect.ValueOf(discord.GuildCategory),
		"GuildDiscoveryDisqualifiedMessage":       reflect.ValueOf(discord.GuildDiscoveryDisqualifiedMessage),
		"GuildDiscoveryGracePeriodFinalWarning":   reflect.ValueOf(discord.GuildDiscoveryGracePeriodFinalWarning),
		"GuildDiscoveryGracePeriodInitialWarning": reflect.ValueOf(discord.GuildDiscoveryGracePeriodInitialWarning),
		"GuildDiscoveryRequalifiedMessage":        reflect.ValueOf(discord.GuildDiscoveryRequalifiedMessage),
		"GuildInviteReminderMessage":              reflect.ValueOf(discord.GuildInviteReminderMessage),
		"GuildMemberJoinMessage":                  reflect.ValueOf(discord.GuildMemberJoinMessage),
		"GuildNews":                               reflect.ValueOf(discord.GuildNews),
		"GuildNewsThread":                         reflect.ValueOf(discord.GuildNewsThread),
		"GuildOnlyStage":                          reflect.ValueOf(discord.GuildOnlyStage),
		"GuildPrivateThread":                      reflect.ValueOf(discord.GuildPrivateThread),
		"GuildPublicThread":                       reflect.ValueOf(discord.GuildPublicThread),
		"GuildStageVoice":                         reflect.ValueOf(discord.GuildStageVoice),
		"GuildSticker":                            reflect.ValueOf(discord.GuildSticker),
		"GuildStore":                              reflect.ValueOf(discord.GuildStore),
		"GuildText":                               reflect.ValueOf(discord.GuildText),
		"GuildUpdate":                             reflect.ValueOf(discord.GuildUpdate),
		"GuildVoice":                              reflect.ValueOf(discord.GuildVoice),
		"HighVerification":                        reflect.ValueOf(discord.HighVerification),
		"HouseBalance":                            reflect.ValueOf(discord.HouseBalance),
		"HouseBravery":                            reflect.ValueOf(discord.HouseBravery),
		"HouseBrilliance":                         reflect.ValueOf(discord.HouseBrilliance),
		"HypeSquadEvents":                         reflect.ValueOf(discord.HypeSquadEvents),
		"IdleStatus":                              reflect.ValueOf(discord.IdleStatus),
		"ImageEmbed":                              reflect.ValueOf(discord.ImageEmbed),
		"IncomingFriendRequest":                   reflect.ValueOf(discord.IncomingFriendRequest),
		"IncomingWebhook":                         reflect.ValueOf(discord.IncomingWebhook),
		"InlinedReplyMessage":                     reflect.ValueOf(discord.InlinedReplyMessage),
		"InstanceActivity":                        reflect.ValueOf(discord.InstanceActivity),
		"IntegerOption":                           reflect.ValueOf(discord.IntegerOption),
		"IntegrationCreate":                       reflect.ValueOf(discord.IntegrationCreate),
		"IntegrationDelete":                       reflect.ValueOf(discord.IntegrationDelete),
		"IntegrationUpdate":                       reflect.ValueOf(discord.IntegrationUpdate),
		"InvisibleStatus":                         reflect.ValueOf(discord.InvisibleStatus),
		"InviteCreate":                            reflect.ValueOf(discord.InviteCreate),
		"InviteDelete":                            reflect.ValueOf(discord.InviteDelete),
		"InviteNormalUser":                        reflect.ValueOf(discord.InviteNormalUser),
		"InviteSplash":                            reflect.ValueOf(discord.InviteSplash),
		"InviteUpdate":                            reflect.ValueOf(discord.InviteUpdate),
		"InviteUserStream":                        reflect.ValueOf(discord.InviteUserStream),
		"JPEGImage":                               reflect.ValueOf(discord.JPEGImage),
		"JoinActivity":                            reflect.ValueOf(discord.JoinActivity),
		"JoinMessage":                             reflect.ValueOf(discord.JoinMessage),
		"JoinRequestActivity":                     reflect.ValueOf(discord.JoinRequestActivity),
		"JoinRequestMessage":                      reflect.ValueOf(discord.JoinRequestMessage),
		"Kick":                                    reflect.ValueOf(discord.Kick),
		"LinkButton":                              reflect.ValueOf(discord.LinkButton),
		"LinkEmbed":                               reflect.ValueOf(discord.LinkEmbed),
		"ListenMessage":                           reflect.ValueOf(discord.ListenMessage),
		"ListeningActivity":                       reflect.ValueOf(discord.ListeningActivity),
		"LowVerification":                         reflect.ValueOf(discord.LowVerification),
		"MediumVerification":                      reflect.ValueOf(discord.MediumVerification),
		"MemberBanAdd":                            reflect.ValueOf(discord.MemberBanAdd),
		"MemberBanRemove":                         reflect.ValueOf(discord.MemberBanRemove),
		"MemberDisconnect":                        reflect.ValueOf(discord.MemberDisconnect),
		"MemberKick":                              reflect.ValueOf(discord.MemberKick),
		"MemberMove":                              reflect.ValueOf(discord.MemberMove),
		"MemberPrune":                             reflect.ValueOf(discord.MemberPrune),
		"MemberRoleUpdate":                        reflect.ValueOf(discord.MemberRoleUpdate),
		"MemberUpdate":                            reflect.ValueOf(discord.MemberUpdate),
		"MembersWithoutRoles":                     reflect.ValueOf(discord.MembersWithoutRoles),
		"MentionableOption":                       reflect.ValueOf(discord.MentionableOption),
		"MessageBulkDelete":                       reflect.ValueOf(discord.MessageBulkDelete),
		"MessageCommand":                          reflect.ValueOf(discord.MessageCommand),
		"MessageDelete":                           reflect.ValueOf(discord.MessageDelete),
		"MessageHasThread":                        reflect.ValueOf(discord.MessageHasThread),
		"MessageIsCrosspost":                      reflect.ValueOf(discord.MessageIsCrosspost),
		"MessageLoading":                          reflect.ValueOf(discord.MessageLoading),
		"MessagePin":                              reflect.ValueOf(discord.MessagePin),
		"MessageUnpin":                            reflect.ValueOf(discord.MessageUnpin),
		"News":                                    reflect.ValueOf(discord.News),
		"NitroBoostMessage":                       reflect.ValueOf(discord.NitroBoostMessage),
		"NitroClassic":                            reflect.ValueOf(discord.NitroClassic),
		"NitroFull":                               reflect.ValueOf(discord.NitroFull),
		"NitroLevel1":                             reflect.ValueOf(discord.NitroLevel1),
		"NitroLevel2":                             reflect.ValueOf(discord.NitroLevel2),
		"NitroLevel3":                             reflect.ValueOf(discord.NitroLevel3),
		"NitroTier1Message":                       reflect.ValueOf(discord.NitroTier1Message),
		"NitroTier2Message":                       reflect.ValueOf(discord.NitroTier2Message),
		"NitroTier3Message":                       reflect.ValueOf(discord.NitroTier3Message),
		"NoContentFilter":                         reflect.ValueOf(discord.NoContentFilter),
		"NoFlag":                                  reflect.ValueOf(discord.NoFlag),
		"NoMFA":                                   reflect.ValueOf(discord.NoMFA),
		"NoNitroLevel":                            reflect.ValueOf(discord.NoNitroLevel),
		"NoUserNitro":                             reflect.ValueOf(discord.NoUserNitro),
		"NoVerification":                          reflect.ValueOf(discord.NoVerification),
		"NormalEmbed":                             reflect.ValueOf(discord.NormalEmbed),
		"NullAppID":                               reflect.ValueOf(discord.NullAppID),
		"NullAttachmentID":                        reflect.ValueOf(discord.NullAttachmentID),
		"NullAuditLogEntryID":                     reflect.ValueOf(discord.NullAuditLogEntryID),
		"NullChannelID":                           reflect.ValueOf(discord.NullChannelID),
		"NullColor":                               reflect.ValueOf(discord.NullColor),
		"NullCommandID":                           reflect.ValueOf(discord.NullCommandID),
		"NullEmojiID":                             reflect.ValueOf(discord.NullEmojiID),
		"NullExplicitFilter":                      reflect.ValueOf(discord.NullExplicitFilter),
		"NullGuildID":                             reflect.ValueOf(discord.NullGuildID),
		"NullIntegrationID":                       reflect.ValueOf(discord.NullIntegrationID),
		"NullInteractionID":                       reflect.ValueOf(discord.NullInteractionID),
		"NullMessage":                             reflect.ValueOf(discord.NullMessage),
		"NullMessageID":                           reflect.ValueOf(discord.NullMessageID),
		"NullNotification":                        reflect.ValueOf(discord.NullNotification),
		"NullRoleID":                              reflect.ValueOf(discord.NullRoleID),
		"NullSecond":                              reflect.ValueOf(discord.NullSecond),
		"NullSnowflake":                           reflect.ValueOf(discord.NullSnowflake),
		"NullStageID":                             reflect.ValueOf(discord.NullStageID),
		"NullStickerID":                           reflect.ValueOf(discord.NullStickerID),
		"NullStickerPackID":                       reflect.ValueOf(discord.NullStickerPackID),
		"NullUserID":                              reflect.ValueOf(discord.NullUserID),
		"NullVerification":                        reflect.ValueOf(discord.NullVerification),
		"NullWebhookID":                           reflect.ValueOf(discord.NullWebhookID),
		"NumberOption":                            reflect.ValueOf(discord.NumberOption),
		"OfflineStatus":                           reflect.ValueOf(discord.OfflineStatus),
		"OneDayArchive":                           reflect.ValueOf(discord.OneDayArchive),
		"OneHourArchive":                          reflect.ValueOf(discord.OneHourArchive),
		"OnlineStatus":                            reflect.ValueOf(discord.OnlineStatus),
		"OnlyMentions":                            reflect.ValueOf(discord.OnlyMentions),
		"OverwriteMember":                         reflect.ValueOf(discord.OverwriteMember),
		"OverwriteRole":                           reflect.ValueOf(discord.OverwriteRole),
		"PNGImage":                                reflect.ValueOf(discord.PNGImage),
		"Partner":                                 reflect.ValueOf(discord.Partner),
		"Partnered":                               reflect.ValueOf(discord.Partnered),
		"PermissionAddReactions":                  reflect.ValueOf(discord.PermissionAddReactions),
		"PermissionAdministrator":                 reflect.ValueOf(discord.PermissionAdministrator),
		"PermissionAll":                           reflect.ValueOf(discord.PermissionAll),
		"PermissionAllChannel":                    reflect.ValueOf(discord.PermissionAllChannel),
		"PermissionAllText":                       reflect.ValueOf(discord.PermissionAllText),
		"PermissionAllVoice":                      reflect.ValueOf(discord.PermissionAllVoice),
		"PermissionAttachFiles":                   reflect.ValueOf(discord.PermissionAttachFiles),
		"PermissionBanMembers":                    reflect.ValueOf(discord.PermissionBanMembers),
		"PermissionChangeNickname":                reflect.ValueOf(discord.PermissionChangeNickname),
		"PermissionConnect":                       reflect.ValueOf(discord.PermissionConnect),
		"PermissionCreateInstantInvite":           reflect.ValueOf(discord.PermissionCreateInstantInvite),
		"PermissionCreatePrivateThreads":          reflect.ValueOf(discord.PermissionCreatePrivateThreads),
		"PermissionCreatePublicThreads":           reflect.ValueOf(discord.PermissionCreatePublicThreads),
		"PermissionDeafenMembers":                 reflect.ValueOf(discord.PermissionDeafenMembers),
		"PermissionEmbedLinks":                    reflect.ValueOf(discord.PermissionEmbedLinks),
		"PermissionKickMembers":                   reflect.ValueOf(discord.PermissionKickMembers),
		"PermissionManageChannels":                reflect.ValueOf(discord.PermissionManageChannels),
		"PermissionManageEmojisAndStickers":       reflect.ValueOf(discord.PermissionManageEmojisAndStickers),
		"PermissionManageGuild":                   reflect.ValueOf(discord.PermissionManageGuild),
		"PermissionManageMessages":                reflect.ValueOf(discord.PermissionManageMessages),
		"PermissionManageNicknames":               reflect.ValueOf(discord.PermissionManageNicknames),
		"PermissionManageRoles":                   reflect.ValueOf(discord.PermissionManageRoles),
		"PermissionManageThreads":                 reflect.ValueOf(discord.PermissionManageThreads),
		"PermissionManageWebhooks":                reflect.ValueOf(discord.PermissionManageWebhooks),
		"PermissionMentionEveryone":               reflect.ValueOf(discord.PermissionMentionEveryone),
		"PermissionMoveMembers":                   reflect.ValueOf(discord.PermissionMoveMembers),
		"PermissionMuteMembers":                   reflect.ValueOf(discord.PermissionMuteMembers),
		"PermissionPrioritySpeaker":               reflect.ValueOf(discord.PermissionPrioritySpeaker),
		"PermissionReadMessageHistory":            reflect.ValueOf(discord.PermissionReadMessageHistory),
		"PermissionRequestToSpeak":                reflect.ValueOf(discord.PermissionRequestToSpeak),
		"PermissionSendMessages":                  reflect.ValueOf(discord.PermissionSendMessages),
		"PermissionSendMessagesInThreads":         reflect.ValueOf(discord.PermissionSendMessagesInThreads),
		"PermissionSendTTSMessages":               reflect.ValueOf(discord.PermissionSendTTSMessages),
		"PermissionSpeak":                         reflect.ValueOf(discord.PermissionSpeak),
		"PermissionStartEmbeddedActivities":       reflect.ValueOf(discord.PermissionStartEmbeddedActivities),
		"PermissionStream":                        reflect.ValueOf(discord.PermissionStream),
		"PermissionUseExternalEmojis":             reflect.ValueOf(discord.PermissionUseExternalEmojis),
		"PermissionUseExternalStickers":           reflect.ValueOf(discord.PermissionUseExternalStickers),
		"PermissionUseSlashCommands":              reflect.ValueOf(discord.PermissionUseSlashCommands),
		"PermissionUseVAD":                        reflect.ValueOf(discord.PermissionUseVAD),
		"PermissionViewAuditLog":                  reflect.ValueOf(discord.PermissionViewAuditLog),
		"PermissionViewChannel":                   reflect.ValueOf(discord.PermissionViewChannel),
		"PingInteraction":                         reflect.ValueOf(discord.PingInteraction),
		"PlayActivity":                            reflect.ValueOf(discord.PlayActivity),
		"PrimaryButton":                           reflect.ValueOf(discord.PrimaryButton),
		"Public":                                  reflect.ValueOf(discord.Public),
		"PublicStage":                             reflect.ValueOf(discord.PublicStage),
		"RecipientAddMessage":                     reflect.ValueOf(discord.RecipientAddMessage),
		"RecipientRemoveMessage":                  reflect.ValueOf(discord.RecipientRemoveMessage),
		"RemoveRole":                              reflect.ValueOf(discord.RemoveRole),
		"RoleCommandPermission":                   reflect.ValueOf(discord.RoleCommandPermission),
		"RoleCreate":                              reflect.ValueOf(discord.RoleCreate),
		"RoleDelete":                              reflect.ValueOf(discord.RoleDelete),
		"RoleOption":                              reflect.ValueOf(discord.RoleOption),
		"RoleUpdate":                              reflect.ValueOf(discord.RoleUpdate),
		"SecondaryButton":                         reflect.ValueOf(discord.SecondaryButton),
		"SelectComponentType":                     reflect.ValueOf(discord.SelectComponentType),
		"SentFriendRequest":                       reflect.ValueOf(discord.SentFriendRequest),
		"SevenDaysArchive":                        reflect.ValueOf(discord.SevenDaysArchive),
		"SourceMessageDeleted":                    reflect.ValueOf(discord.SourceMessageDeleted),
		"SpectateActivity":                        reflect.ValueOf(discord.SpectateActivity),
		"SpectateMessage":                         reflect.ValueOf(discord.SpectateMessage),
		"StandardSticker":                         reflect.ValueOf(discord.StandardSticker),
		"StickerFormatAPNG":                       reflect.ValueOf(discord.StickerFormatAPNG),
		"StickerFormatLottie":                     reflect.ValueOf(discord.StickerFormatLottie),
		"StickerFormatPNG":                        reflect.ValueOf(discord.StickerFormatPNG),
		"StreamingActivity":                       reflect.ValueOf(discord.StreamingActivity),
		"StringOption":                            reflect.ValueOf(discord.StringOption),
		"SubcommandGroupOption":                   reflect.ValueOf(discord.SubcommandGroupOption),
		"SubcommandOption":                        reflect.ValueOf(discord.SubcommandOption),
		"SuccessButton":                           reflect.ValueOf(discord.SuccessButton),
		"SuppressEmbeds":                          reflect.ValueOf(discord.SuppressEmbeds),
		"SuppressJoinNotifications":               reflect.ValueOf(discord.SuppressJoinNotifications),
		"SuppressPremiumSubscriptions":            reflect.ValueOf(discord.SuppressPremiumSubscriptions),
		"SyncActivity":                            reflect.ValueOf(discord.SyncActivity),
		"System":                                  reflect.ValueOf(discord.System),
		"TeamUser":                                reflect.ValueOf(discord.TeamUser),
		"ThreadCreatedMessage":                    reflect.ValueOf(discord.ThreadCreatedMessage),
		"ThreadStarterMessage":                    reflect.ValueOf(discord.ThreadStarterMessage),
		"ThreeDaysArchive":                        reflect.ValueOf(discord.ThreeDaysArchive),
		"TimestampFormat":                         reflect.ValueOf(discord.TimestampFormat),
		"TwitchService":                           reflect.ValueOf(discord.TwitchService),
		"UnknownStatus":                           reflect.ValueOf(discord.UnknownStatus),
		"UrgentMessage":                           reflect.ValueOf(discord.UrgentMessage),
		"UserCommand":                             reflect.ValueOf(discord.UserCommand),
		"UserCommandPermission":                   reflect.ValueOf(discord.UserCommandPermission),
		"UserOption":                              reflect.ValueOf(discord.UserOption),
		"VIPRegions":                              reflect.ValueOf(discord.VIPRegions),
		"VanityURL":                               reflect.ValueOf(discord.VanityURL),
		"Verified":                                reflect.ValueOf(discord.Verified),
		"VerifiedBot":                             reflect.ValueOf(discord.VerifiedBot),
		"VerifiedBotDeveloper":                    reflect.ValueOf(discord.VerifiedBotDeveloper),
		"VeryHighVerification":                    reflect.ValueOf(discord.VeryHighVerification),
		"VideoEmbed":                              reflect.ValueOf(discord.VideoEmbed),
		"WatchingActivity":                        reflect.ValueOf(discord.WatchingActivity),
		"WebPImage":                               reflect.ValueOf(discord.WebPImage),
		"WebhookCreate":                           reflect.ValueOf(discord.WebhookCreate),
		"WebhookDelete":                           reflect.ValueOf(discord.WebhookDelete),
		"WebhookUpdate":                           reflect.ValueOf(discord.WebhookUpdate),
		"YouTubeService":                          reflect.ValueOf(discord.YouTubeService),

		// variables
		"DefaultEmbedColor":   reflect.ValueOf(discord.DefaultEmbedColor),
		"DefaultMemberColor":  reflect.ValueOf(discord.DefaultMemberColor),
		"ErrNestedActionRow":  reflect.ValueOf(discord.ErrNestedActionRow),
		"ZeroOptionalSeconds": reflect.ValueOf(discord.ZeroOptionalSeconds),

		// functions
		"CalcOverwrites":         reflect.ValueOf(discord.CalcOverwrites),
		"DurationSinceEpoch":     reflect.ValueOf(discord.DurationSinceEpoch),
		"DurationToMilliseconds": reflect.ValueOf(discord.DurationToMilliseconds),
		"DurationToSeconds":      reflect.ValueOf(discord.DurationToSeconds),
		"HasFlag":                reflect.ValueOf(discord.HasFlag),
		"MemberColor":            reflect.ValueOf(discord.MemberColor),
		"NewCustomEmoji":         reflect.ValueOf(discord.NewCustomEmoji),
		"NewEmbed":               reflect.ValueOf(discord.NewEmbed),
		"NewOptionalSeconds":     reflect.ValueOf(discord.NewOptionalSeconds),
		"NewSnowflake":           reflect.ValueOf(discord.NewSnowflake),
		"NewTimestamp":           reflect.ValueOf(discord.NewTimestamp),
		"NowTimestamp":           reflect.ValueOf(discord.NowTimestamp),
		"ParseSnowflake":         reflect.ValueOf(discord.ParseSnowflake),
		"TimeToMilliseconds":     reflect.ValueOf(discord.TimeToMilliseconds),
		"UnwrapComponents":       reflect.ValueOf(discord.UnwrapComponents),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/discord"] = map[string]reflect.Type{
		"APIEmoji":                 reflect.TypeOf((*discord.APIEmoji)(nil)).Elem(),
		"ActionRowComponent":       reflect.TypeOf((*discord.ActionRowComponent)(nil)).Elem(),
		"Activity":                 reflect.TypeOf((*discord.Activity)(nil)).Elem(),
		"ActivityAssets":           reflect.TypeOf((*discord.ActivityAssets)(nil)).Elem(),
		"ActivityFlags":            reflect.TypeOf((*discord.ActivityFlags)(nil)).Elem(),
		"ActivityParty":            reflect.TypeOf((*discord.ActivityParty)(nil)).Elem(),
		"ActivitySecrets":          reflect.TypeOf((*discord.ActivitySecrets)(nil)).Elem(),
		"ActivityTimestamps":       reflect.TypeOf((*discord.ActivityTimestamps)(nil)).Elem(),
		"ActivityType":             reflect.TypeOf((*discord.ActivityType)(nil)).Elem(),
		"AppID":                    reflect.TypeOf((*discord.AppID)(nil)).Elem(),
		"ArchiveDuration":          reflect.TypeOf((*discord.ArchiveDuration)(nil)).Elem(),
		"Attachment":               reflect.TypeOf((*discord.Attachment)(nil)).Elem(),
		"AttachmentID":             reflect.TypeOf((*discord.AttachmentID)(nil)).Elem(),
		"AuditEntryInfo":           reflect.TypeOf((*discord.AuditEntryInfo)(nil)).Elem(),
		"AuditLog":                 reflect.TypeOf((*discord.AuditLog)(nil)).Elem(),
		"AuditLogChange":           reflect.TypeOf((*discord.AuditLogChange)(nil)).Elem(),
		"AuditLogChangeKey":        reflect.TypeOf((*discord.AuditLogChangeKey)(nil)).Elem(),
		"AuditLogEntry":            reflect.TypeOf((*discord.AuditLogEntry)(nil)).Elem(),
		"AuditLogEntryID":          reflect.TypeOf((*discord.AuditLogEntryID)(nil)).Elem(),
		"AuditLogEvent":            reflect.TypeOf((*discord.AuditLogEvent)(nil)).Elem(),
		"Ban":                      reflect.TypeOf((*discord.Ban)(nil)).Elem(),
		"ButtonComponent":          reflect.TypeOf((*discord.ButtonComponent)(nil)).Elem(),
		"ButtonEmoji":              reflect.TypeOf((*discord.ButtonEmoji)(nil)).Elem(),
		"ButtonStyle":              reflect.TypeOf((*discord.ButtonStyle)(nil)).Elem(),
		"Channel":                  reflect.TypeOf((*discord.Channel)(nil)).Elem(),
		"ChannelID":                reflect.TypeOf((*discord.ChannelID)(nil)).Elem(),
		"ChannelMention":           reflect.TypeOf((*discord.ChannelMention)(nil)).Elem(),
		"ChannelType":              reflect.TypeOf((*discord.ChannelType)(nil)).Elem(),
		"ClientStatus":             reflect.TypeOf((*discord.ClientStatus)(nil)).Elem(),
		"Color":                    reflect.TypeOf((*discord.Color)(nil)).Elem(),
		"Command":                  reflect.TypeOf((*discord.Command)(nil)).Elem(),
		"CommandID":                reflect.TypeOf((*discord.CommandID)(nil)).Elem(),
		"CommandInteractionData":   reflect.TypeOf((*discord.CommandInteractionData)(nil)).Elem(),
		"CommandOption":            reflect.TypeOf((*discord.CommandOption)(nil)).Elem(),
		"CommandOptionChoice":      reflect.TypeOf((*discord.CommandOptionChoice)(nil)).Elem(),
		"CommandOptionType":        reflect.TypeOf((*discord.CommandOptionType)(nil)).Elem(),
		"CommandPermissionType":    reflect.TypeOf((*discord.CommandPermissionType)(nil)).Elem(),
		"CommandPermissions":       reflect.TypeOf((*discord.CommandPermissions)(nil)).Elem(),
		"CommandType":              reflect.TypeOf((*discord.CommandType)(nil)).Elem(),
		"Component":                reflect.TypeOf((*discord.Component)(nil)).Elem(),
		"ComponentInteractionData": reflect.TypeOf((*discord.ComponentInteractionData)(nil)).Elem(),
		"ComponentType":            reflect.TypeOf((*discord.ComponentType)(nil)).Elem(),
		"ComponentWrap":            reflect.TypeOf((*discord.ComponentWrap)(nil)).Elem(),
		"Connection":               reflect.TypeOf((*discord.Connection)(nil)).Elem(),
		"ConnectionVisibility":     reflect.TypeOf((*discord.ConnectionVisibility)(nil)).Elem(),
		"Embed":                    reflect.TypeOf((*discord.Embed)(nil)).Elem(),
		"EmbedAuthor":              reflect.TypeOf((*discord.EmbedAuthor)(nil)).Elem(),
		"EmbedField":               reflect.TypeOf((*discord.EmbedField)(nil)).Elem(),
		"EmbedFooter":              reflect.TypeOf((*discord.EmbedFooter)(nil)).Elem(),
		"EmbedImage":               reflect.TypeOf((*discord.EmbedImage)(nil)).Elem(),
		"EmbedProvider":            reflect.TypeOf((*discord.EmbedProvider)(nil)).Elem(),
		"EmbedThumbnail":           reflect.TypeOf((*discord.EmbedThumbnail)(nil)).Elem(),
		"EmbedType":                reflect.TypeOf((*discord.EmbedType)(nil)).Elem(),
		"EmbedVideo":               reflect.TypeOf((*discord.EmbedVideo)(nil)).Elem(),
		"Emoji":                    reflect.TypeOf((*discord.Emoji)(nil)).Elem(),
		"EmojiID":                  reflect.TypeOf((*discord.EmojiID)(nil)).Elem(),
		"ExpireBehavior":           reflect.TypeOf((*discord.ExpireBehavior)(nil)).Elem(),
		"ExplicitFilter":           reflect.TypeOf((*discord.ExplicitFilter)(nil)).Elem(),
		"Guild":                    reflect.TypeOf((*discord.Guild)(nil)).Elem(),
		"GuildCommandPermissions":  reflect.TypeOf((*discord.GuildCommandPermissions)(nil)).Elem(),
		"GuildFeature":             reflect.TypeOf((*discord.GuildFeature)(nil)).Elem(),
		"GuildID":                  reflect.TypeOf((*discord.GuildID)(nil)).Elem(),
		"GuildPreview":             reflect.TypeOf((*discord.GuildPreview)(nil)).Elem(),
		"GuildUser":                reflect.TypeOf((*discord.GuildUser)(nil)).Elem(),
		"GuildWidget":              reflect.TypeOf((*discord.GuildWidget)(nil)).Elem(),
		"GuildWidgetSettings":      reflect.TypeOf((*discord.GuildWidgetSettings)(nil)).Elem(),
		"Hash":                     reflect.TypeOf((*discord.Hash)(nil)).Elem(),
		"ImageType":                reflect.TypeOf((*discord.ImageType)(nil)).Elem(),
		"Integration":              reflect.TypeOf((*discord.Integration)(nil)).Elem(),
		"IntegrationAccount":       reflect.TypeOf((*discord.IntegrationAccount)(nil)).Elem(),
		"IntegrationApplication":   reflect.TypeOf((*discord.IntegrationApplication)(nil)).Elem(),
		"IntegrationID":            reflect.TypeOf((*discord.IntegrationID)(nil)).Elem(),
		"Interaction":              reflect.TypeOf((*discord.Interaction)(nil)).Elem(),
		"InteractionData":          reflect.TypeOf((*discord.InteractionData)(nil)).Elem(),
		"InteractionID":            reflect.TypeOf((*discord.InteractionID)(nil)).Elem(),
		"InteractionOption":        reflect.TypeOf((*discord.InteractionOption)(nil)).Elem(),
		"InteractionType":          reflect.TypeOf((*discord.InteractionType)(nil)).Elem(),
		"Invite":                   reflect.TypeOf((*discord.Invite)(nil)).Elem(),
		"InviteMetadata":           reflect.TypeOf((*discord.InviteMetadata)(nil)).Elem(),
		"InviteUserType":           reflect.TypeOf((*discord.InviteUserType)(nil)).Elem(),
		"MFALevel":                 reflect.TypeOf((*discord.MFALevel)(nil)).Elem(),
		"Member":                   reflect.TypeOf((*discord.Member)(nil)).Elem(),
		"Message":                  reflect.TypeOf((*discord.Message)(nil)).Elem(),
		"MessageActivity":          reflect.TypeOf((*discord.MessageActivity)(nil)).Elem(),
		"MessageActivityType":      reflect.TypeOf((*discord.MessageActivityType)(nil)).Elem(),
		"MessageApplication":       reflect.TypeOf((*discord.MessageApplication)(nil)).Elem(),
		"MessageFlags":             reflect.TypeOf((*discord.MessageFlags)(nil)).Elem(),
		"MessageID":                reflect.TypeOf((*discord.MessageID)(nil)).Elem(),
		"MessageReference":         reflect.TypeOf((*discord.MessageReference)(nil)).Elem(),
		"MessageType":              reflect.TypeOf((*discord.MessageType)(nil)).Elem(),
		"Milliseconds":             reflect.TypeOf((*discord.Milliseconds)(nil)).Elem(),
		"NitroBoost":               reflect.TypeOf((*discord.NitroBoost)(nil)).Elem(),
		"Notification":             reflect.TypeOf((*discord.Notification)(nil)).Elem(),
		"OptionalSeconds":          reflect.TypeOf((*discord.OptionalSeconds)(nil)).Elem(),
		"OverboundError":           reflect.TypeOf((*discord.OverboundError)(nil)).Elem(),
		"Overwrite":                reflect.TypeOf((*discord.Overwrite)(nil)).Elem(),
		"OverwriteType":            reflect.TypeOf((*discord.OverwriteType)(nil)).Elem(),
		"Permissions":              reflect.TypeOf((*discord.Permissions)(nil)).Elem(),
		"Presence":                 reflect.TypeOf((*discord.Presence)(nil)).Elem(),
		"PrivacyLevel":             reflect.TypeOf((*discord.PrivacyLevel)(nil)).Elem(),
		"Reaction":                 reflect.TypeOf((*discord.Reaction)(nil)).Elem(),
		"Relationship":             reflect.TypeOf((*discord.Relationship)(nil)).Elem(),
		"RelationshipType":         reflect.TypeOf((*discord.RelationshipType)(nil)).Elem(),
		"Role":                     reflect.TypeOf((*discord.Role)(nil)).Elem(),
		"RoleID":                   reflect.TypeOf((*discord.RoleID)(nil)).Elem(),
		"Seconds":                  reflect.TypeOf((*discord.Seconds)(nil)).Elem(),
		"SelectComponent":          reflect.TypeOf((*discord.SelectComponent)(nil)).Elem(),
		"SelectComponentOption":    reflect.TypeOf((*discord.SelectComponentOption)(nil)).Elem(),
		"Service":                  reflect.TypeOf((*discord.Service)(nil)).Elem(),
		"Snowflake":                reflect.TypeOf((*discord.Snowflake)(nil)).Elem(),
		"StageID":                  reflect.TypeOf((*discord.StageID)(nil)).Elem(),
		"StageInstance":            reflect.TypeOf((*discord.StageInstance)(nil)).Elem(),
		"Status":                   reflect.TypeOf((*discord.Status)(nil)).Elem(),
		"Sticker":                  reflect.TypeOf((*discord.Sticker)(nil)).Elem(),
		"StickerFormatType":        reflect.TypeOf((*discord.StickerFormatType)(nil)).Elem(),
		"StickerID":                reflect.TypeOf((*discord.StickerID)(nil)).Elem(),
		"StickerPackID":            reflect.TypeOf((*discord.StickerPackID)(nil)).Elem(),
		"StickerType":              reflect.TypeOf((*discord.StickerType)(nil)).Elem(),
		"SystemChannelFlags":       reflect.TypeOf((*discord.SystemChannelFlags)(nil)).Elem(),
		"ThreadMember":             reflect.TypeOf((*discord.ThreadMember)(nil)).Elem(),
		"ThreadMemberFlags":        reflect.TypeOf((*discord.ThreadMemberFlags)(nil)).Elem(),
		"ThreadMetadata":           reflect.TypeOf((*discord.ThreadMetadata)(nil)).Elem(),
		"Timestamp":                reflect.TypeOf((*discord.Timestamp)(nil)).Elem(),
		"URL":                      reflect.TypeOf((*discord.URL)(nil)).Elem(),
		"UnixMsTimestamp":          reflect.TypeOf((*discord.UnixMsTimestamp)(nil)).Elem(),
		"UnixTimestamp":            reflect.TypeOf((*discord.UnixTimestamp)(nil)).Elem(),
		"UnknownComponent":         reflect.TypeOf((*discord.UnknownComponent)(nil)).Elem(),
		"UnknownInteractionData":   reflect.TypeOf((*discord.UnknownInteractionData)(nil)).Elem(),
		"User":                     reflect.TypeOf((*discord.User)(nil)).Elem(),
		"UserFlags":                reflect.TypeOf((*discord.UserFlags)(nil)).Elem(),
		"UserID":                   reflect.TypeOf((*discord.UserID)(nil)).Elem(),
		"UserNitro":                reflect.TypeOf((*discord.UserNitro)(nil)).Elem(),
		"Verification":             reflect.TypeOf((*discord.Verification)(nil)).Elem(),
		"VideoQualityMode":         reflect.TypeOf((*discord.VideoQualityMode)(nil)).Elem(),
		"VoiceRegion":              reflect.TypeOf((*discord.VoiceRegion)(nil)).Elem(),
		"VoiceState":               reflect.TypeOf((*discord.VoiceState)(nil)).Elem(),
		"Webhook":                  reflect.TypeOf((*discord.Webhook)(nil)).Elem(),
		"WebhookID":                reflect.TypeOf((*discord.WebhookID)(nil)).Elem(),
		"WebhookType":              reflect.TypeOf((*discord.WebhookType)(nil)).Elem(),
	}
}

func initArikawaGateway() {
	env.Packages["github.com/diamondburned/arikawa/v3/gateway"] = map[string]reflect.Value{
		// constants
		"AllNotifications":             reflect.ValueOf(gateway.AllNotifications),
		"CallConnectOP":                reflect.ValueOf(gateway.CallConnectOP),
		"DispatchOP":                   reflect.ValueOf(gateway.DispatchOP),
		"GuildDefaults":                reflect.ValueOf(gateway.GuildDefaults),
		"GuildSubscriptionsOP":         reflect.ValueOf(gateway.GuildSubscriptionsOP),
		"HeartbeatAckOP":               reflect.ValueOf(gateway.HeartbeatAckOP),
		"HeartbeatOP":                  reflect.ValueOf(gateway.HeartbeatOP),
		"HelloOP":                      reflect.ValueOf(gateway.HelloOP),
		"IdentifyOP":                   reflect.ValueOf(gateway.IdentifyOP),
		"IntentDirectMessageReactions": reflect.ValueOf(gateway.IntentDirectMessageReactions),
		"IntentDirectMessageTyping":    reflect.ValueOf(gateway.IntentDirectMessageTyping),
		"IntentDirectMessages":         reflect.ValueOf(gateway.IntentDirectMessages),
		"IntentGuildBans":              reflect.ValueOf(gateway.IntentGuildBans),
		"IntentGuildEmojis":            reflect.ValueOf(gateway.IntentGuildEmojis),
		"IntentGuildIntegrations":      reflect.ValueOf(gateway.IntentGuildIntegrations),
		"IntentGuildInvites":           reflect.ValueOf(gateway.IntentGuildInvites),
		"IntentGuildMembers":           reflect.ValueOf(gateway.IntentGuildMembers),
		"IntentGuildMessageReactions":  reflect.ValueOf(gateway.IntentGuildMessageReactions),
		"IntentGuildMessageTyping":     reflect.ValueOf(gateway.IntentGuildMessageTyping),
		"IntentGuildMessages":          reflect.ValueOf(gateway.IntentGuildMessages),
		"IntentGuildPresences":         reflect.ValueOf(gateway.IntentGuildPresences),
		"IntentGuildVoiceStates":       reflect.ValueOf(gateway.IntentGuildVoiceStates),
		"IntentGuildWebhooks":          reflect.ValueOf(gateway.IntentGuildWebhooks),
		"IntentGuilds":                 reflect.ValueOf(gateway.IntentGuilds),
		"InvalidSessionOP":             reflect.ValueOf(gateway.InvalidSessionOP),
		"NoNotifications":              reflect.ValueOf(gateway.NoNotifications),
		"OnlyMentions":                 reflect.ValueOf(gateway.OnlyMentions),
		"ReconnectOP":                  reflect.ValueOf(gateway.ReconnectOP),
		"RequestGuildMembersOP":        reflect.ValueOf(gateway.RequestGuildMembersOP),
		"ResumeOP":                     reflect.ValueOf(gateway.ResumeOP),
		"StatusUpdateOP":               reflect.ValueOf(gateway.StatusUpdateOP),
		"VoiceServerPingOP":            reflect.ValueOf(gateway.VoiceServerPingOP),
		"VoiceStateUpdateOP":           reflect.ValueOf(gateway.VoiceStateUpdateOP),

		// variables
		"DefaultIdentity":     reflect.ValueOf(gateway.DefaultIdentity),
		"DefaultPresence":     reflect.ValueOf(gateway.DefaultPresence),
		"DefaultShard":        reflect.ValueOf(gateway.DefaultShard),
		"Encoding":            reflect.ValueOf(gateway.Encoding),
		"ErrClosed":           reflect.ValueOf(gateway.ErrClosed),
		"ErrMissingForResume": reflect.ValueOf(gateway.ErrMissingForResume),
		"ErrReconnectRequest": reflect.ValueOf(gateway.ErrReconnectRequest),
		"ErrWSMaxTries":       reflect.ValueOf(gateway.ErrWSMaxTries),
		"EventCreator":        reflect.ValueOf(gateway.EventCreator),
		"EventIntents":        reflect.ValueOf(gateway.EventIntents),
		"PrivilegedIntents":   reflect.ValueOf(gateway.PrivilegedIntents),
		"Version":             reflect.ValueOf(gateway.Version),

		// functions
		"AddGatewayParams":            reflect.ValueOf(gateway.AddGatewayParams),
		"BotURL":                      reflect.ValueOf(gateway.BotURL),
		"ConvertSupplementalMember":   reflect.ValueOf(gateway.ConvertSupplementalMember),
		"ConvertSupplementalPresence": reflect.ValueOf(gateway.ConvertSupplementalPresence),
		"DefaultIdentifier":           reflect.ValueOf(gateway.DefaultIdentifier),
		"DefaultIdentifyData":         reflect.ValueOf(gateway.DefaultIdentifyData),
		"NewCustomGateway":            reflect.ValueOf(gateway.NewCustomGateway),
		"NewCustomIdentifiedGateway":  reflect.ValueOf(gateway.NewCustomIdentifiedGateway),
		"NewGateway":                  reflect.ValueOf(gateway.NewGateway),
		"NewGatewayWithIntents":       reflect.ValueOf(gateway.NewGatewayWithIntents),
		"NewIdentifiedGateway":        reflect.ValueOf(gateway.NewIdentifiedGateway),
		"NewIdentifier":               reflect.ValueOf(gateway.NewIdentifier),
		"URL":                         reflect.ValueOf(gateway.URL),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/gateway"] = map[string]reflect.Type{
		"ChannelCreateEvent":              reflect.TypeOf((*gateway.ChannelCreateEvent)(nil)).Elem(),
		"ChannelDeleteEvent":              reflect.TypeOf((*gateway.ChannelDeleteEvent)(nil)).Elem(),
		"ChannelPinsUpdateEvent":          reflect.TypeOf((*gateway.ChannelPinsUpdateEvent)(nil)).Elem(),
		"ChannelUnreadUpdateEvent":        reflect.TypeOf((*gateway.ChannelUnreadUpdateEvent)(nil)).Elem(),
		"ChannelUpdateEvent":              reflect.TypeOf((*gateway.ChannelUpdateEvent)(nil)).Elem(),
		"CustomUserStatus":                reflect.TypeOf((*gateway.CustomUserStatus)(nil)).Elem(),
		"Event":                           reflect.TypeOf((*gateway.Event)(nil)).Elem(),
		"FriendSourceFlags":               reflect.TypeOf((*gateway.FriendSourceFlags)(nil)).Elem(),
		"Gateway":                         reflect.TypeOf((*gateway.Gateway)(nil)).Elem(),
		"GuildBanAddEvent":                reflect.TypeOf((*gateway.GuildBanAddEvent)(nil)).Elem(),
		"GuildBanRemoveEvent":             reflect.TypeOf((*gateway.GuildBanRemoveEvent)(nil)).Elem(),
		"GuildCreateEvent":                reflect.TypeOf((*gateway.GuildCreateEvent)(nil)).Elem(),
		"GuildDeleteEvent":                reflect.TypeOf((*gateway.GuildDeleteEvent)(nil)).Elem(),
		"GuildEmojisUpdateEvent":          reflect.TypeOf((*gateway.GuildEmojisUpdateEvent)(nil)).Elem(),
		"GuildFolder":                     reflect.TypeOf((*gateway.GuildFolder)(nil)).Elem(),
		"GuildFolderID":                   reflect.TypeOf((*gateway.GuildFolderID)(nil)).Elem(),
		"GuildIntegrationsUpdateEvent":    reflect.TypeOf((*gateway.GuildIntegrationsUpdateEvent)(nil)).Elem(),
		"GuildMemberAddEvent":             reflect.TypeOf((*gateway.GuildMemberAddEvent)(nil)).Elem(),
		"GuildMemberListGroup":            reflect.TypeOf((*gateway.GuildMemberListGroup)(nil)).Elem(),
		"GuildMemberListOp":               reflect.TypeOf((*gateway.GuildMemberListOp)(nil)).Elem(),
		"GuildMemberListOpItem":           reflect.TypeOf((*gateway.GuildMemberListOpItem)(nil)).Elem(),
		"GuildMemberListUpdate":           reflect.TypeOf((*gateway.GuildMemberListUpdate)(nil)).Elem(),
		"GuildMemberRemoveEvent":          reflect.TypeOf((*gateway.GuildMemberRemoveEvent)(nil)).Elem(),
		"GuildMemberUpdateEvent":          reflect.TypeOf((*gateway.GuildMemberUpdateEvent)(nil)).Elem(),
		"GuildMembersChunkEvent":          reflect.TypeOf((*gateway.GuildMembersChunkEvent)(nil)).Elem(),
		"GuildRoleCreateEvent":            reflect.TypeOf((*gateway.GuildRoleCreateEvent)(nil)).Elem(),
		"GuildRoleDeleteEvent":            reflect.TypeOf((*gateway.GuildRoleDeleteEvent)(nil)).Elem(),
		"GuildRoleUpdateEvent":            reflect.TypeOf((*gateway.GuildRoleUpdateEvent)(nil)).Elem(),
		"GuildSubscribeData":              reflect.TypeOf((*gateway.GuildSubscribeData)(nil)).Elem(),
		"GuildUpdateEvent":                reflect.TypeOf((*gateway.GuildUpdateEvent)(nil)).Elem(),
		"HeartbeatData":                   reflect.TypeOf((*gateway.HeartbeatData)(nil)).Elem(),
		"HelloEvent":                      reflect.TypeOf((*gateway.HelloEvent)(nil)).Elem(),
		"Identifier":                      reflect.TypeOf((*gateway.Identifier)(nil)).Elem(),
		"IdentifyData":                    reflect.TypeOf((*gateway.IdentifyData)(nil)).Elem(),
		"IdentifyProperties":              reflect.TypeOf((*gateway.IdentifyProperties)(nil)).Elem(),
		"Intents":                         reflect.TypeOf((*gateway.Intents)(nil)).Elem(),
		"InteractionCreateEvent":          reflect.TypeOf((*gateway.InteractionCreateEvent)(nil)).Elem(),
		"InvalidSessionEvent":             reflect.TypeOf((*gateway.InvalidSessionEvent)(nil)).Elem(),
		"InviteCreateEvent":               reflect.TypeOf((*gateway.InviteCreateEvent)(nil)).Elem(),
		"InviteDeleteEvent":               reflect.TypeOf((*gateway.InviteDeleteEvent)(nil)).Elem(),
		"MergedPresences":                 reflect.TypeOf((*gateway.MergedPresences)(nil)).Elem(),
		"MessageAckEvent":                 reflect.TypeOf((*gateway.MessageAckEvent)(nil)).Elem(),
		"MessageCreateEvent":              reflect.TypeOf((*gateway.MessageCreateEvent)(nil)).Elem(),
		"MessageDeleteBulkEvent":          reflect.TypeOf((*gateway.MessageDeleteBulkEvent)(nil)).Elem(),
		"MessageDeleteEvent":              reflect.TypeOf((*gateway.MessageDeleteEvent)(nil)).Elem(),
		"MessageReactionAddEvent":         reflect.TypeOf((*gateway.MessageReactionAddEvent)(nil)).Elem(),
		"MessageReactionRemoveAllEvent":   reflect.TypeOf((*gateway.MessageReactionRemoveAllEvent)(nil)).Elem(),
		"MessageReactionRemoveEmojiEvent": reflect.TypeOf((*gateway.MessageReactionRemoveEmojiEvent)(nil)).Elem(),
		"MessageReactionRemoveEvent":      reflect.TypeOf((*gateway.MessageReactionRemoveEvent)(nil)).Elem(),
		"MessageUpdateEvent":              reflect.TypeOf((*gateway.MessageUpdateEvent)(nil)).Elem(),
		"OPCode":                          reflect.TypeOf((*gateway.OPCode)(nil)).Elem(),
		"PresenceUpdateEvent":             reflect.TypeOf((*gateway.PresenceUpdateEvent)(nil)).Elem(),
		"PresencesReplaceEvent":           reflect.TypeOf((*gateway.PresencesReplaceEvent)(nil)).Elem(),
		"ReadState":                       reflect.TypeOf((*gateway.ReadState)(nil)).Elem(),
		"ReadyEvent":                      reflect.TypeOf((*gateway.ReadyEvent)(nil)).Elem(),
		"ReadySupplementalEvent":          reflect.TypeOf((*gateway.ReadySupplementalEvent)(nil)).Elem(),
		"RelationshipAddEvent":            reflect.TypeOf((*gateway.RelationshipAddEvent)(nil)).Elem(),
		"RelationshipRemoveEvent":         reflect.TypeOf((*gateway.RelationshipRemoveEvent)(nil)).Elem(),
		"RequestGuildMembersData":         reflect.TypeOf((*gateway.RequestGuildMembersData)(nil)).Elem(),
		"ResumeData":                      reflect.TypeOf((*gateway.ResumeData)(nil)).Elem(),
		"ResumedEvent":                    reflect.TypeOf((*gateway.ResumedEvent)(nil)).Elem(),
		"SessionsReplaceEvent":            reflect.TypeOf((*gateway.SessionsReplaceEvent)(nil)).Elem(),
		"Shard":                           reflect.TypeOf((*gateway.Shard)(nil)).Elem(),
		"SupplementalMember":              reflect.TypeOf((*gateway.SupplementalMember)(nil)).Elem(),
		"SupplementalPresence":            reflect.TypeOf((*gateway.SupplementalPresence)(nil)).Elem(),
		"ThreadCreateEvent":               reflect.TypeOf((*gateway.ThreadCreateEvent)(nil)).Elem(),
		"ThreadDeleteEvent":               reflect.TypeOf((*gateway.ThreadDeleteEvent)(nil)).Elem(),
		"ThreadListSyncEvent":             reflect.TypeOf((*gateway.ThreadListSyncEvent)(nil)).Elem(),
		"ThreadMemberUpdateEvent":         reflect.TypeOf((*gateway.ThreadMemberUpdateEvent)(nil)).Elem(),
		"ThreadMembersUpdateEvent":        reflect.TypeOf((*gateway.ThreadMembersUpdateEvent)(nil)).Elem(),
		"ThreadUpdateEvent":               reflect.TypeOf((*gateway.ThreadUpdateEvent)(nil)).Elem(),
		"TypingStartEvent":                reflect.TypeOf((*gateway.TypingStartEvent)(nil)).Elem(),
		"UpdateStatusData":                reflect.TypeOf((*gateway.UpdateStatusData)(nil)).Elem(),
		"UpdateVoiceStateData":            reflect.TypeOf((*gateway.UpdateVoiceStateData)(nil)).Elem(),
		"UserChannelOverride":             reflect.TypeOf((*gateway.UserChannelOverride)(nil)).Elem(),
		"UserGuildSetting":                reflect.TypeOf((*gateway.UserGuildSetting)(nil)).Elem(),
		"UserGuildSettingsUpdateEvent":    reflect.TypeOf((*gateway.UserGuildSettingsUpdateEvent)(nil)).Elem(),
		"UserMuteConfig":                  reflect.TypeOf((*gateway.UserMuteConfig)(nil)).Elem(),
		"UserNoteUpdateEvent":             reflect.TypeOf((*gateway.UserNoteUpdateEvent)(nil)).Elem(),
		"UserNotification":                reflect.TypeOf((*gateway.UserNotification)(nil)).Elem(),
		"UserSettings":                    reflect.TypeOf((*gateway.UserSettings)(nil)).Elem(),
		"UserSettingsUpdateEvent":         reflect.TypeOf((*gateway.UserSettingsUpdateEvent)(nil)).Elem(),
		"UserUpdateEvent":                 reflect.TypeOf((*gateway.UserUpdateEvent)(nil)).Elem(),
		"VoiceServerUpdateEvent":          reflect.TypeOf((*gateway.VoiceServerUpdateEvent)(nil)).Elem(),
		"VoiceStateUpdateEvent":           reflect.TypeOf((*gateway.VoiceStateUpdateEvent)(nil)).Elem(),
		"WebhooksUpdateEvent":             reflect.TypeOf((*gateway.WebhooksUpdateEvent)(nil)).Elem(),
	}
}

func initArikawaGatewayShard() {
	env.Packages["github.com/diamondburned/arikawa/v3/gateway/shard"] = map[string]reflect.Value{
		// constants

		// variables
		"NewGatewayShardFunc": reflect.ValueOf(shard.NewGatewayShardFunc),

		// functions
		"CloseShards":                 reflect.ValueOf(shard.CloseShards),
		"NewGatewayShard":             reflect.ValueOf(shard.NewGatewayShard),
		"NewIdentifiedManager":        reflect.ValueOf(shard.NewIdentifiedManager),
		"NewIdentifiedManagerWithURL": reflect.ValueOf(shard.NewIdentifiedManagerWithURL),
		"NewManager":                  reflect.ValueOf(shard.NewManager),
		"OpenShards":                  reflect.ValueOf(shard.OpenShards),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/gateway/shard"] = map[string]reflect.Type{
		"Manager":      reflect.TypeOf((*shard.Manager)(nil)).Elem(),
		"NewShardFunc": reflect.TypeOf((*shard.NewShardFunc)(nil)).Elem(),
		"Shard":        reflect.TypeOf((*shard.Shard)(nil)).Elem(),
		"ShardState":   reflect.TypeOf((*shard.ShardState)(nil)).Elem(),
	}
}

func initArikawaSession() {
	env.Packages["github.com/diamondburned/arikawa/v3/session"] = map[string]reflect.Value{
		// constants

		// variables
		"ErrMFA": reflect.ValueOf(session.ErrMFA),

		// functions
		"Login":            reflect.ValueOf(session.Login),
		"New":              reflect.ValueOf(session.New),
		"NewCustomSession": reflect.ValueOf(session.NewCustomSession),
		"NewCustomShard":   reflect.ValueOf(session.NewCustomShard),
		"NewShardFunc":     reflect.ValueOf(session.NewShardFunc),
		"NewWithGateway":   reflect.ValueOf(session.NewWithGateway),
		"NewWithIntents":   reflect.ValueOf(session.NewWithIntents),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/session"] = map[string]reflect.Type{
		"Closed":  reflect.TypeOf((*session.Closed)(nil)).Elem(),
		"Session": reflect.TypeOf((*session.Session)(nil)).Elem(),
	}
}

func initArikawaState() {
	env.Packages["github.com/diamondburned/arikawa/v3/state"] = map[string]reflect.Value{
		// constants

		// variables
		"MaxFetchGuilds":  reflect.ValueOf(state.MaxFetchGuilds),
		"MaxFetchMembers": reflect.ValueOf(state.MaxFetchMembers),

		// functions
		"New":            reflect.ValueOf(state.New),
		"NewFromSession": reflect.ValueOf(state.NewFromSession),
		"NewShardFunc":   reflect.ValueOf(state.NewShardFunc),
		"NewWithIntents": reflect.ValueOf(state.NewWithIntents),
		"NewWithStore":   reflect.ValueOf(state.NewWithStore),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/state"] = map[string]reflect.Type{
		"GuildAvailableEvent":   reflect.TypeOf((*state.GuildAvailableEvent)(nil)).Elem(),
		"GuildJoinEvent":        reflect.TypeOf((*state.GuildJoinEvent)(nil)).Elem(),
		"GuildLeaveEvent":       reflect.TypeOf((*state.GuildLeaveEvent)(nil)).Elem(),
		"GuildReadyEvent":       reflect.TypeOf((*state.GuildReadyEvent)(nil)).Elem(),
		"GuildUnavailableEvent": reflect.TypeOf((*state.GuildUnavailableEvent)(nil)).Elem(),
		"State":                 reflect.TypeOf((*state.State)(nil)).Elem(),
	}
}

func initArikawaStateStore() {
	env.Packages["github.com/diamondburned/arikawa/v3/state/store"] = map[string]reflect.Value{
		// constants

		// variables
		"ErrNotFound": reflect.ValueOf(store.ErrNotFound),
		"Noop":        reflect.ValueOf(store.Noop),
		"NoopCabinet": reflect.ValueOf(store.NoopCabinet),

		// functions
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/state/store"] = map[string]reflect.Type{
		"Cabinet":         reflect.TypeOf((*store.Cabinet)(nil)).Elem(),
		"ChannelStore":    reflect.TypeOf((*store.ChannelStore)(nil)).Elem(),
		"EmojiStore":      reflect.TypeOf((*store.EmojiStore)(nil)).Elem(),
		"GuildStore":      reflect.TypeOf((*store.GuildStore)(nil)).Elem(),
		"MeStore":         reflect.TypeOf((*store.MeStore)(nil)).Elem(),
		"MemberStore":     reflect.TypeOf((*store.MemberStore)(nil)).Elem(),
		"MessageStore":    reflect.TypeOf((*store.MessageStore)(nil)).Elem(),
		"NoopStore":       reflect.TypeOf((*store.NoopStore)(nil)).Elem(),
		"PresenceStore":   reflect.TypeOf((*store.PresenceStore)(nil)).Elem(),
		"ResetErrors":     reflect.TypeOf((*store.ResetErrors)(nil)).Elem(),
		"Resetter":        reflect.TypeOf((*store.Resetter)(nil)).Elem(),
		"RoleStore":       reflect.TypeOf((*store.RoleStore)(nil)).Elem(),
		"VoiceStateStore": reflect.TypeOf((*store.VoiceStateStore)(nil)).Elem(),
	}
}

func initArikawaStateStoreDefaultstore() {
	env.Packages["github.com/diamondburned/arikawa/v3/state/store/defaultstore"] = map[string]reflect.Value{
		// constants

		// variables

		// functions
		"DiffMessage":   reflect.ValueOf(defaultstore.DiffMessage),
		"New":           reflect.ValueOf(defaultstore.New),
		"NewChannel":    reflect.ValueOf(defaultstore.NewChannel),
		"NewEmoji":      reflect.ValueOf(defaultstore.NewEmoji),
		"NewGuild":      reflect.ValueOf(defaultstore.NewGuild),
		"NewMe":         reflect.ValueOf(defaultstore.NewMe),
		"NewMember":     reflect.ValueOf(defaultstore.NewMember),
		"NewMessage":    reflect.ValueOf(defaultstore.NewMessage),
		"NewPresence":   reflect.ValueOf(defaultstore.NewPresence),
		"NewRole":       reflect.ValueOf(defaultstore.NewRole),
		"NewVoiceState": reflect.ValueOf(defaultstore.NewVoiceState),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/state/store/defaultstore"] = map[string]reflect.Type{
		"Channel":    reflect.TypeOf((*defaultstore.Channel)(nil)).Elem(),
		"Emoji":      reflect.TypeOf((*defaultstore.Emoji)(nil)).Elem(),
		"Guild":      reflect.TypeOf((*defaultstore.Guild)(nil)).Elem(),
		"Me":         reflect.TypeOf((*defaultstore.Me)(nil)).Elem(),
		"Member":     reflect.TypeOf((*defaultstore.Member)(nil)).Elem(),
		"Message":    reflect.TypeOf((*defaultstore.Message)(nil)).Elem(),
		"Presence":   reflect.TypeOf((*defaultstore.Presence)(nil)).Elem(),
		"Role":       reflect.TypeOf((*defaultstore.Role)(nil)).Elem(),
		"VoiceState": reflect.TypeOf((*defaultstore.VoiceState)(nil)).Elem(),
	}
}

func initArikawaUtilsBot() {
	env.Packages["github.com/diamondburned/arikawa/v3/utils/bot"] = map[string]reflect.Value{
		// constants

		// variables
		"Break":                reflect.ValueOf(bot.Break),
		"DefaultArgsParser":    reflect.ValueOf(bot.DefaultArgsParser),
		"ErrNotEnoughArgs":     reflect.ValueOf(bot.ErrNotEnoughArgs),
		"ErrTooManyArgs":       reflect.ValueOf(bot.ErrTooManyArgs),
		"HelpUnderline":        reflect.ValueOf(bot.HelpUnderline),
		"InvalidUsageString":   reflect.ValueOf(bot.InvalidUsageString),
		"ShellwordsEscaper":    reflect.ValueOf(bot.ShellwordsEscaper),
		"UnknownCommandString": reflect.ValueOf(bot.UnknownCommandString),

		// functions
		"IndentLines":      reflect.ValueOf(bot.IndentLines),
		"New":              reflect.ValueOf(bot.New),
		"NewPrefix":        reflect.ValueOf(bot.NewPrefix),
		"NewShardFunc":     reflect.ValueOf(bot.NewShardFunc),
		"NewSubcommand":    reflect.ValueOf(bot.NewSubcommand),
		"ParseMiddleware":  reflect.ValueOf(bot.ParseMiddleware),
		"Run":              reflect.ValueOf(bot.Run),
		"Start":            reflect.ValueOf(bot.Start),
		"WaitForInterrupt": reflect.ValueOf(bot.WaitForInterrupt),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/utils/bot"] = map[string]reflect.Type{
		"ArgsParser":          reflect.TypeOf((*bot.ArgsParser)(nil)).Elem(),
		"Argument":            reflect.TypeOf((*bot.Argument)(nil)).Elem(),
		"ArgumentParts":       reflect.TypeOf((*bot.ArgumentParts)(nil)).Elem(),
		"CanHelp":             reflect.TypeOf((*bot.CanHelp)(nil)).Elem(),
		"CanSetup":            reflect.TypeOf((*bot.CanSetup)(nil)).Elem(),
		"Context":             reflect.TypeOf((*bot.Context)(nil)).Elem(),
		"CustomParser":        reflect.TypeOf((*bot.CustomParser)(nil)).Elem(),
		"InvalidUsageError":   reflect.TypeOf((*bot.InvalidUsageError)(nil)).Elem(),
		"ManualParser":        reflect.TypeOf((*bot.ManualParser)(nil)).Elem(),
		"MethodContext":       reflect.TypeOf((*bot.MethodContext)(nil)).Elem(),
		"MiddlewareContext":   reflect.TypeOf((*bot.MiddlewareContext)(nil)).Elem(),
		"Parser":              reflect.TypeOf((*bot.Parser)(nil)).Elem(),
		"Prefixer":            reflect.TypeOf((*bot.Prefixer)(nil)).Elem(),
		"RawArguments":        reflect.TypeOf((*bot.RawArguments)(nil)).Elem(),
		"Subcommand":          reflect.TypeOf((*bot.Subcommand)(nil)).Elem(),
		"UnknownCommandError": reflect.TypeOf((*bot.UnknownCommandError)(nil)).Elem(),
		"Usager":              reflect.TypeOf((*bot.Usager)(nil)).Elem(),
	}
}

func initArikawaUtilsBotExtrasArguments() {
	env.Packages["github.com/diamondburned/arikawa/v3/utils/bot/extras/arguments"] = map[string]reflect.Value{
		// constants

		// variables
		"ChannelRegex":    reflect.ValueOf(arguments.ChannelRegex),
		"EmojiRegex":      reflect.ValueOf(arguments.EmojiRegex),
		"ErrInvalidEmoji": reflect.ValueOf(arguments.ErrInvalidEmoji),
		"FlagName":        reflect.ValueOf(arguments.FlagName),
		"Regex":           reflect.ValueOf(arguments.Regex),
		"RoleRegex":       reflect.ValueOf(arguments.RoleRegex),
		"UserRegex":       reflect.ValueOf(arguments.UserRegex),

		// functions
		"NewFlagSet":      reflect.ValueOf(arguments.NewFlagSet),
		"ParseMessageURL": reflect.ValueOf(arguments.ParseMessageURL),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/utils/bot/extras/arguments"] = map[string]reflect.Type{
		"ChannelMention": reflect.TypeOf((*arguments.ChannelMention)(nil)).Elem(),
		"Emoji":          reflect.TypeOf((*arguments.Emoji)(nil)).Elem(),
		"Flag":           reflect.TypeOf((*arguments.Flag)(nil)).Elem(),
		"FlagSet":        reflect.TypeOf((*arguments.FlagSet)(nil)).Elem(),
		"Joined":         reflect.TypeOf((*arguments.Joined)(nil)).Elem(),
		"MessageURL":     reflect.TypeOf((*arguments.MessageURL)(nil)).Elem(),
		"RoleMention":    reflect.TypeOf((*arguments.RoleMention)(nil)).Elem(),
		"UserMention":    reflect.TypeOf((*arguments.UserMention)(nil)).Elem(),
	}
}

func initArikawaUtilsBotExtrasInfer() {
	env.Packages["github.com/diamondburned/arikawa/v3/utils/bot/extras/infer"] = map[string]reflect.Value{
		// constants

		// variables

		// functions
		"ChannelID": reflect.ValueOf(infer.ChannelID),
		"GuildID":   reflect.ValueOf(infer.GuildID),
		"UserID":    reflect.ValueOf(infer.UserID),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/utils/bot/extras/infer"] = map[string]reflect.Type{}
}

func initArikawaUtilsBotExtrasMiddlewares() {
	env.Packages["github.com/diamondburned/arikawa/v3/utils/bot/extras/middlewares"] = map[string]reflect.Value{
		// constants

		// variables

		// functions
		"AdminOnly": reflect.ValueOf(middlewares.AdminOnly),
		"GuildOnly": reflect.ValueOf(middlewares.GuildOnly),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/utils/bot/extras/middlewares"] = map[string]reflect.Type{}
}

func initArikawaUtilsBotExtrasShellwords() {
	env.Packages["github.com/diamondburned/arikawa/v3/utils/bot/extras/shellwords"] = map[string]reflect.Value{
		// constants

		// variables

		// functions
		"Parse": reflect.ValueOf(shellwords.Parse),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/utils/bot/extras/shellwords"] = map[string]reflect.Type{
		"MissingCloseError": reflect.TypeOf((*shellwords.MissingCloseError)(nil)).Elem(),
	}
}

func initArikawaUtilsHandler() {
	env.Packages["github.com/diamondburned/arikawa/v3/utils/handler"] = map[string]reflect.Value{
		// constants

		// variables

		// functions
		"New": reflect.ValueOf(handler.New),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/utils/handler"] = map[string]reflect.Type{
		"Handler": reflect.TypeOf((*handler.Handler)(nil)).Elem(),
	}
}

func initArikawaUtilsHttputil() {
	env.Packages["github.com/diamondburned/arikawa/v3/utils/httputil"] = map[string]reflect.Value{
		// constants
		"StatusTooManyRequests": reflect.ValueOf(httputil.StatusTooManyRequests),

		// variables
		"Retries": reflect.ValueOf(httputil.Retries),

		// functions
		"JSONRequest":      reflect.ValueOf(httputil.JSONRequest),
		"MultipartRequest": reflect.ValueOf(httputil.MultipartRequest),
		"NewClient":        reflect.ValueOf(httputil.NewClient),
		"PrependOptions":   reflect.ValueOf(httputil.PrependOptions),
		"WithBody":         reflect.ValueOf(httputil.WithBody),
		"WithContentType":  reflect.ValueOf(httputil.WithContentType),
		"WithHeaders":      reflect.ValueOf(httputil.WithHeaders),
		"WithJSONBody":     reflect.ValueOf(httputil.WithJSONBody),
		"WithSchema":       reflect.ValueOf(httputil.WithSchema),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/utils/httputil"] = map[string]reflect.Type{
		"Client":          reflect.TypeOf((*httputil.Client)(nil)).Elem(),
		"DefaultSchema":   reflect.TypeOf((*httputil.DefaultSchema)(nil)).Elem(),
		"ErrorCode":       reflect.TypeOf((*httputil.ErrorCode)(nil)).Elem(),
		"HTTPError":       reflect.TypeOf((*httputil.HTTPError)(nil)).Elem(),
		"JSONError":       reflect.TypeOf((*httputil.JSONError)(nil)).Elem(),
		"MultipartWriter": reflect.TypeOf((*httputil.MultipartWriter)(nil)).Elem(),
		"RequestError":    reflect.TypeOf((*httputil.RequestError)(nil)).Elem(),
		"RequestOption":   reflect.TypeOf((*httputil.RequestOption)(nil)).Elem(),
		"ResponseFunc":    reflect.TypeOf((*httputil.ResponseFunc)(nil)).Elem(),
		"SchemaEncoder":   reflect.TypeOf((*httputil.SchemaEncoder)(nil)).Elem(),
	}
}

func initArikawaUtilsHttputilHttpdriver() {
	env.Packages["github.com/diamondburned/arikawa/v3/utils/httputil/httpdriver"] = map[string]reflect.Value{
		// constants
		"NoContent": reflect.ValueOf(httpdriver.NoContent),

		// variables

		// functions
		"NewClient":  reflect.ValueOf(httpdriver.NewClient),
		"OptHeader":  reflect.ValueOf(httpdriver.OptHeader),
		"WrapClient": reflect.ValueOf(httpdriver.WrapClient),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/utils/httputil/httpdriver"] = map[string]reflect.Type{
		"Client":          reflect.TypeOf((*httpdriver.Client)(nil)).Elem(),
		"DefaultClient":   reflect.TypeOf((*httpdriver.DefaultClient)(nil)).Elem(),
		"DefaultRequest":  reflect.TypeOf((*httpdriver.DefaultRequest)(nil)).Elem(),
		"DefaultResponse": reflect.TypeOf((*httpdriver.DefaultResponse)(nil)).Elem(),
		"Request":         reflect.TypeOf((*httpdriver.Request)(nil)).Elem(),
		"Response":        reflect.TypeOf((*httpdriver.Response)(nil)).Elem(),
	}
}

func initArikawaUtilsJson() {
	env.Packages["github.com/diamondburned/arikawa/v3/utils/json"] = map[string]reflect.Value{
		// constants

		// variables
		"Default": reflect.ValueOf(json.Default),

		// functions
		"DecodeStream": reflect.ValueOf(json.DecodeStream),
		"EncodeStream": reflect.ValueOf(json.EncodeStream),
		"Marshal":      reflect.ValueOf(json.Marshal),
		"Unmarshal":    reflect.ValueOf(json.Unmarshal),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/utils/json"] = map[string]reflect.Type{
		"AlwaysString":  reflect.TypeOf((*json.AlwaysString)(nil)).Elem(),
		"DefaultDriver": reflect.TypeOf((*json.DefaultDriver)(nil)).Elem(),
		"Driver":        reflect.TypeOf((*json.Driver)(nil)).Elem(),
		"Marshaler":     reflect.TypeOf((*json.Marshaler)(nil)).Elem(),
		"Raw":           reflect.TypeOf((*json.Raw)(nil)).Elem(),
		"Unmarshaler":   reflect.TypeOf((*json.Unmarshaler)(nil)).Elem(),
	}
}

func initArikawaUtilsJsonEnum() {
	env.Packages["github.com/diamondburned/arikawa/v3/utils/json/enum"] = map[string]reflect.Value{
		// constants
		"Null": reflect.ValueOf(enum.Null),

		// variables

		// functions
		"FromJSON": reflect.ValueOf(enum.FromJSON),
		"ToJSON":   reflect.ValueOf(enum.ToJSON),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/utils/json/enum"] = map[string]reflect.Type{
		"Enum": reflect.TypeOf((*enum.Enum)(nil)).Elem(),
	}
}

func initArikawaUtilsJsonOption() {
	env.Packages["github.com/diamondburned/arikawa/v3/utils/json/option"] = map[string]reflect.Value{
		// constants

		// variables
		"False":         reflect.ValueOf(option.False),
		"NullBool":      reflect.ValueOf(option.NullBool),
		"NullInt":       reflect.ValueOf(option.NullInt),
		"NullString":    reflect.ValueOf(option.NullString),
		"NullUint":      reflect.ValueOf(option.NullUint),
		"NullableFalse": reflect.ValueOf(option.NullableFalse),
		"NullableTrue":  reflect.ValueOf(option.NullableTrue),
		"True":          reflect.ValueOf(option.True),
		"ZeroInt":       reflect.ValueOf(option.ZeroInt),
		"ZeroUint":      reflect.ValueOf(option.ZeroUint),

		// functions
		"NewInt":            reflect.ValueOf(option.NewInt),
		"NewNullableInt":    reflect.ValueOf(option.NewNullableInt),
		"NewNullableString": reflect.ValueOf(option.NewNullableString),
		"NewNullableUint":   reflect.ValueOf(option.NewNullableUint),
		"NewString":         reflect.ValueOf(option.NewString),
		"NewUint":           reflect.ValueOf(option.NewUint),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/utils/json/option"] = map[string]reflect.Type{
		"Bool":               reflect.TypeOf((*option.Bool)(nil)).Elem(),
		"Int":                reflect.TypeOf((*option.Int)(nil)).Elem(),
		"NullableBool":       reflect.TypeOf((*option.NullableBool)(nil)).Elem(),
		"NullableBoolData":   reflect.TypeOf((*option.NullableBoolData)(nil)).Elem(),
		"NullableInt":        reflect.TypeOf((*option.NullableInt)(nil)).Elem(),
		"NullableIntData":    reflect.TypeOf((*option.NullableIntData)(nil)).Elem(),
		"NullableString":     reflect.TypeOf((*option.NullableString)(nil)).Elem(),
		"NullableStringData": reflect.TypeOf((*option.NullableStringData)(nil)).Elem(),
		"NullableUint":       reflect.TypeOf((*option.NullableUint)(nil)).Elem(),
		"NullableUintData":   reflect.TypeOf((*option.NullableUintData)(nil)).Elem(),
		"String":             reflect.TypeOf((*option.String)(nil)).Elem(),
		"Uint":               reflect.TypeOf((*option.Uint)(nil)).Elem(),
	}
}

func initArikawaUtilsSendpart() {
	env.Packages["github.com/diamondburned/arikawa/v3/utils/sendpart"] = map[string]reflect.Value{
		// constants

		// variables

		// functions
		"Do":    reflect.ValueOf(sendpart.Do),
		"PATCH": reflect.ValueOf(sendpart.PATCH),
		"POST":  reflect.ValueOf(sendpart.POST),
		"Write": reflect.ValueOf(sendpart.Write),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/utils/sendpart"] = map[string]reflect.Type{
		"DataMultipartWriter": reflect.TypeOf((*sendpart.DataMultipartWriter)(nil)).Elem(),
		"File":                reflect.TypeOf((*sendpart.File)(nil)).Elem(),
	}
}

func initArikawaUtilsWsutil() {
	env.Packages["github.com/diamondburned/arikawa/v3/utils/wsutil"] = map[string]reflect.Value{
		// constants

		// variables
		"CloseDeadline":      reflect.ValueOf(wsutil.CloseDeadline),
		"CopyBufferSize":     reflect.ValueOf(wsutil.CopyBufferSize),
		"ErrEmptyPayload":    reflect.ValueOf(wsutil.ErrEmptyPayload),
		"ErrWebsocketClosed": reflect.ValueOf(wsutil.ErrWebsocketClosed),
		"MaxCapUntilReset":   reflect.ValueOf(wsutil.MaxCapUntilReset),
		"WSBuffer":           reflect.ValueOf(wsutil.WSBuffer),
		"WSDebug":            reflect.ValueOf(wsutil.WSDebug),
		"WSError":            reflect.ValueOf(wsutil.WSError),
		"WSTimeout":          reflect.ValueOf(wsutil.WSTimeout),

		// functions
		"AssertEvent":              reflect.ValueOf(wsutil.AssertEvent),
		"DecodeOP":                 reflect.ValueOf(wsutil.DecodeOP),
		"ErrBrokenConnection":      reflect.ValueOf(wsutil.ErrBrokenConnection),
		"HandleEvent":              reflect.ValueOf(wsutil.HandleEvent),
		"IsBrokenConnection":       reflect.ValueOf(wsutil.IsBrokenConnection),
		"IsUnknownEvent":           reflect.ValueOf(wsutil.IsUnknownEvent),
		"New":                      reflect.ValueOf(wsutil.New),
		"NewConn":                  reflect.ValueOf(wsutil.NewConn),
		"NewConnWithDialer":        reflect.ValueOf(wsutil.NewConnWithDialer),
		"NewCustom":                reflect.ValueOf(wsutil.NewCustom),
		"NewDialLimiter":           reflect.ValueOf(wsutil.NewDialLimiter),
		"NewGlobalIdentityLimiter": reflect.ValueOf(wsutil.NewGlobalIdentityLimiter),
		"NewIdentityLimiter":       reflect.ValueOf(wsutil.NewIdentityLimiter),
		"NewSendLimiter":           reflect.ValueOf(wsutil.NewSendLimiter),
		"WaitForEvent":             reflect.ValueOf(wsutil.WaitForEvent),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/utils/wsutil"] = map[string]reflect.Type{
		"Conn":              reflect.TypeOf((*wsutil.Conn)(nil)).Elem(),
		"Connection":        reflect.TypeOf((*wsutil.Connection)(nil)).Elem(),
		"Event":             reflect.TypeOf((*wsutil.Event)(nil)).Elem(),
		"EventHandler":      reflect.TypeOf((*wsutil.EventHandler)(nil)).Elem(),
		"EventLoopHandler":  reflect.TypeOf((*wsutil.EventLoopHandler)(nil)).Elem(),
		"ExtraHandler":      reflect.TypeOf((*wsutil.ExtraHandler)(nil)).Elem(),
		"ExtraHandlers":     reflect.TypeOf((*wsutil.ExtraHandlers)(nil)).Elem(),
		"OP":                reflect.TypeOf((*wsutil.OP)(nil)).Elem(),
		"OPCode":            reflect.TypeOf((*wsutil.OPCode)(nil)).Elem(),
		"PacemakerLoop":     reflect.TypeOf((*wsutil.PacemakerLoop)(nil)).Elem(),
		"UnknownEventError": reflect.TypeOf((*wsutil.UnknownEventError)(nil)).Elem(),
		"Websocket":         reflect.TypeOf((*wsutil.Websocket)(nil)).Elem(),
	}
}

func initArikawaVoice() {
	env.Packages["github.com/diamondburned/arikawa/v3/voice"] = map[string]reflect.Value{
		// constants
		"Protocol": reflect.ValueOf(voice.Protocol),

		// variables
		"ErrAlreadyConnecting": reflect.ValueOf(voice.ErrAlreadyConnecting),
		"ErrCannotSend":        reflect.ValueOf(voice.ErrCannotSend),
		"WSTimeout":            reflect.ValueOf(voice.WSTimeout),

		// functions
		"AddIntents":       reflect.ValueOf(voice.AddIntents),
		"NewSession":       reflect.ValueOf(voice.NewSession),
		"NewSessionCustom": reflect.ValueOf(voice.NewSessionCustom),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/voice"] = map[string]reflect.Type{
		"Session": reflect.TypeOf((*voice.Session)(nil)).Elem(),
	}
}

func initArikawaVoiceUdp() {
	env.Packages["github.com/diamondburned/arikawa/v3/voice/udp"] = map[string]reflect.Value{
		// constants

		// variables
		"Dialer":              reflect.ValueOf(udp.Dialer),
		"ErrDecryptionFailed": reflect.ValueOf(udp.ErrDecryptionFailed),

		// functions
		"DialConnectionCtx": reflect.ValueOf(udp.DialConnectionCtx),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/voice/udp"] = map[string]reflect.Type{
		"Connection": reflect.TypeOf((*udp.Connection)(nil)).Elem(),
		"Packet":     reflect.TypeOf((*udp.Packet)(nil)).Elem(),
	}
}

func initArikawaVoiceVoicegateway() {
	env.Packages["github.com/diamondburned/arikawa/v3/voice/voicegateway"] = map[string]reflect.Value{
		// constants
		"ClientConnectOP":      reflect.ValueOf(voicegateway.ClientConnectOP),
		"ClientDisconnectOP":   reflect.ValueOf(voicegateway.ClientDisconnectOP),
		"HeartbeatAckOP":       reflect.ValueOf(voicegateway.HeartbeatAckOP),
		"HeartbeatOP":          reflect.ValueOf(voicegateway.HeartbeatOP),
		"HelloOP":              reflect.ValueOf(voicegateway.HelloOP),
		"IdentifyOP":           reflect.ValueOf(voicegateway.IdentifyOP),
		"Microphone":           reflect.ValueOf(voicegateway.Microphone),
		"NotSpeaking":          reflect.ValueOf(voicegateway.NotSpeaking),
		"Priority":             reflect.ValueOf(voicegateway.Priority),
		"ReadyOP":              reflect.ValueOf(voicegateway.ReadyOP),
		"ResumeOP":             reflect.ValueOf(voicegateway.ResumeOP),
		"ResumedOP":            reflect.ValueOf(voicegateway.ResumedOP),
		"SelectProtocolOP":     reflect.ValueOf(voicegateway.SelectProtocolOP),
		"SessionDescriptionOP": reflect.ValueOf(voicegateway.SessionDescriptionOP),
		"Soundshare":           reflect.ValueOf(voicegateway.Soundshare),
		"SpeakingOP":           reflect.ValueOf(voicegateway.SpeakingOP),
		"Version":              reflect.ValueOf(voicegateway.Version),

		// variables
		"ErrMissingForIdentify": reflect.ValueOf(voicegateway.ErrMissingForIdentify),
		"ErrMissingForResume":   reflect.ValueOf(voicegateway.ErrMissingForResume),
		"ErrNoEndpoint":         reflect.ValueOf(voicegateway.ErrNoEndpoint),
		"ErrNoSessionID":        reflect.ValueOf(voicegateway.ErrNoSessionID),

		// functions
		"New": reflect.ValueOf(voicegateway.New),
	}
	env.PackageTypes["github.com/diamondburned/arikawa/v3/voice/voicegateway"] = map[string]reflect.Type{
		"ClientConnectEvent":      reflect.TypeOf((*voicegateway.ClientConnectEvent)(nil)).Elem(),
		"ClientDisconnectEvent":   reflect.TypeOf((*voicegateway.ClientDisconnectEvent)(nil)).Elem(),
		"Event":                   reflect.TypeOf((*voicegateway.Event)(nil)).Elem(),
		"Gateway":                 reflect.TypeOf((*voicegateway.Gateway)(nil)).Elem(),
		"HeartbeatACKEvent":       reflect.TypeOf((*voicegateway.HeartbeatACKEvent)(nil)).Elem(),
		"HelloEvent":              reflect.TypeOf((*voicegateway.HelloEvent)(nil)).Elem(),
		"IdentifyData":            reflect.TypeOf((*voicegateway.IdentifyData)(nil)).Elem(),
		"OPCode":                  reflect.TypeOf((*voicegateway.OPCode)(nil)).Elem(),
		"ReadyEvent":              reflect.TypeOf((*voicegateway.ReadyEvent)(nil)).Elem(),
		"ResumeData":              reflect.TypeOf((*voicegateway.ResumeData)(nil)).Elem(),
		"ResumedEvent":            reflect.TypeOf((*voicegateway.ResumedEvent)(nil)).Elem(),
		"SelectProtocol":          reflect.TypeOf((*voicegateway.SelectProtocol)(nil)).Elem(),
		"SelectProtocolData":      reflect.TypeOf((*voicegateway.SelectProtocolData)(nil)).Elem(),
		"SessionDescriptionEvent": reflect.TypeOf((*voicegateway.SessionDescriptionEvent)(nil)).Elem(),
		"SpeakingData":            reflect.TypeOf((*voicegateway.SpeakingData)(nil)).Elem(),
		"SpeakingEvent":           reflect.TypeOf((*voicegateway.SpeakingEvent)(nil)).Elem(),
		"SpeakingFlag":            reflect.TypeOf((*voicegateway.SpeakingFlag)(nil)).Elem(),
		"State":                   reflect.TypeOf((*voicegateway.State)(nil)).Elem(),
	}
}
